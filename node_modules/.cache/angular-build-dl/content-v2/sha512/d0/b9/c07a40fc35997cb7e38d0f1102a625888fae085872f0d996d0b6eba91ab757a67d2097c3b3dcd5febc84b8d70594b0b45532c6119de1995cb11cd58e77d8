{"version":3,"sources":["src/app/managetisuser/newtisuser/newtisuser.component.html","src/app/managetisuser/newtisuser/newtisuser-routing.module.ts","src/app/managetisuser/newtisuser/newtisuser.component.css","src/app/managetisuser/newtisuser/newtisuser.component.ts","src/app/managetisuser/newtisuser/newtisuser.module.ts","src/app/shared/model/PasswordChange.ts","src/app/shared/model/UserDetails.ts","src/app/shared/model/UserStatus.ts","src/app/shared/model/tisuser.ts","src/app/shared/service/tocs-resolver.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,qnVAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOf;;;;;AAGA,UAAM,MAAM,GAAW,CACrB;AACE,MAAA,IAAI,EAAE,EADR;AAEE,MAAA,SAAS,EAAE,kDAAA,CAAA,qBAAA,CAFb;AAGE,MAAA,OAAO,EAAE;AAAC,QAAA,UAAU,EAAG,iFAAA,CAAA,4BAAA,CAAd;AAA0C,QAAA,IAAI,EAAE,yEAAA,CAAA,qBAAA,CAAhD;AAAqE,QAAA,WAAW,EAAG,iFAAA,CAAA,4BAAA;AAAnF;AAHX,KADqB,CAAvB;AAYA,QAAa,uBAAuB,GAApC,MAAa,uBAAb,CAAoC,EAApC;AAAa,IAAA,uBAAuB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAJnC,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACR,MAAA,OAAO,EAAE,CAAC,4CAAA,CAAA,cAAA,CAAA,CAAa,QAAb,CAAsB,MAAtB,CAAD,CADD;AAER,MAAA,OAAO,EAAE,CAAC,4CAAA,CAAA,cAAA,CAAD;AAFD,KAAT,CAImC,CAAA,EAAvB,uBAAuB,CAAvB;;;;;;;;;;;;;;;;ACtBb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,8jdAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+Bf;;;;;;AASA,QAAa,mBAAmB,GAAhC,MAAa,mBAAb,CAAgC;AAiL9B;;;;;;;;;;;;;AAaA,MAAA,WAAA,CAAoB,KAApB,EACU,MADV,EAEU,WAFV,EAGU,MAHV,EAIU,qBAJV,EAKU,KALV,EAMS,SANT,EAOS,MAPT,EAQS,MART,EAQ0B;AARN,aAAA,KAAA,GAAA,KAAA;AACV,aAAA,MAAA,GAAA,MAAA;AACA,aAAA,WAAA,GAAA,WAAA;AACA,aAAA,MAAA,GAAA,MAAA;AACA,aAAA,qBAAA,GAAA,qBAAA;AACA,aAAA,KAAA,GAAA,KAAA;AACD,aAAA,SAAA,GAAA,SAAA;AACA,aAAA,MAAA,GAAA,MAAA;AACA,aAAA,MAAA,GAAA,MAAA;AApKT;;AACA,aAAA,aAAA,GAAyB,KAAzB;AAGA;;AACA,aAAA,iBAAA,GAA6B,KAA7B;AACA;;AACA,aAAA,SAAA,GAAwB,CACtB;AAAE,UAAA,KAAK,EAAE,2DAAA,CAAA,WAAA,CAAA,CAAU,cAAnB;AAAmC,UAAA,OAAO,EAAE;AAA5C,SADsB,CAAxB;AAIA;;AACA,aAAA,SAAA,GAAwB,CACtB;AAAE,UAAA,KAAK,EAAE,2DAAA,CAAA,WAAA,CAAA,CAAU,qBAAnB;AAA0C,UAAA,OAAO,EAAE;AAAnD,SADsB,CAAxB;AAIA;;AACA,aAAA,gBAAA,GAA8B,CAC5B;AAAE,UAAA,GAAG,EAAE,2DAAA,CAAA,WAAA,CAAA,CAAU,oBAAjB;AAAuC,UAAA,IAAI,EAAE;AAA7C,SAD4B,CAA9B;AAIA;;AACA,aAAA,WAAA,GAA6B,EAA7B;AAgBA;;AACA,aAAA,IAAA,GAAc,EAAd;AAEA;;AACA,aAAA,KAAA,GAAgB,EAAhB;AAEA;;;;;AAIA,aAAA,yBAAA,GAAqC,KAArC;AAEA;;;;;AAIA,aAAA,qBAAA,GAAiC,KAAjC;AAEA;;AACA,aAAA,4BAAA,GAAwC,KAAxC;AAEA;;;;;AAIA,aAAA,kBAAA,GAA8B,KAA9B;AAEA;;AACA,aAAA,uBAAA,GAAmC,KAAnC;AAWA;;;;;AAIA,aAAA,SAAA,GAAsB,EAAtB;AAEA;;AACA,aAAA,IAAA,GAAiB,2DAAA,CAAA,WAAA,CAAA,CAAU,mBAA3B;AAEA;;AACA,aAAA,QAAA,GAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,IAA7B;AACA;;AACA,aAAA,IAAA,GAAgB,KAAhB;AACA;;AACA,aAAA,UAAA,GAAsB,KAAtB;AACA;;AACA,aAAA,oBAAA,GAAgC,KAAhC;AAEA;;AACA,aAAA,kBAAA,GAA8B,IAA9B;AAEA;;AACA,aAAA,iBAAA,GAA6B,IAA7B;AAEA;;;;;AAIA,aAAA,oBAAA,GAAgC,IAAhC;AAKA;;AACA,aAAA,cAAA,GAAyB,EAAzB;AAEA;;AACA,aAAA,kBAAA,GAA6B,EAA7B;AAEA;;;;;AAIA,aAAA,qBAAA,GAAgC,EAAhC;AAEA;;AACA,aAAA,cAAA,GAA0B,KAA1B;AAEA;;AACA,aAAA,IAAA,GAAe,EAAf;AAEA;;AACA,aAAA,KAAA,GAAgB,EAAhB;AAEA;;AACA,aAAA,WAAA,GAAuB,KAAvB;AAKA;;AACA,aAAA,kBAAA,GAA6B,EAA7B;AAEA;;AACA,aAAA,kBAAA,GAA8B,IAA9B;AAwBE,aAAK,WAAL,GAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,gBAA7B;AACA,QAAA,SAAS,CAAC,QAAV,CAAmB,KAAK,IAAxB;AACA,QAAA,SAAS,CAAC,cAAV,CAAyB,KAAK,WAA9B;AACA,aAAK,cAAL,GAAsB,IAAI,iEAAA,CAAA,gBAAA,CAAJ,EAAtB;AAEA,aAAK,gBAAL,GAAwB,KAAK,CAAC,MAAN,CAAa,SAAb,CAAwB,MAAD,IAAwB;AACrE,cAAI,MAAM,CAAC,OAAP,KAAmB,KAAK,kBAA5B,EAAgD;AAC9C,iBAAK,kBAAL,GAA0B,MAAM,CAAC,OAAjC;AACA,iBAAK,UAAL;AACD;AACF,SALuB,CAAxB;AAMD;AA3MD;;;;;;AAIA,UAAW,WAAX,GAAsB;AACpB,eAAO,KAAK,YAAZ;AACD;AAED;;;;;;AAIA,UAAW,WAAX,CAAuB,KAAvB,EAAoC;AAClC,aAAK,YAAL,GAAoB,KAApB;AACD;AA+LD;;;AACQ,MAAA,UAAU,GAAA;AAChB,YAAI,KAAK,kBAAL,IAA2B,IAA3B,IAAmC,KAAK,kBAAL,IAA2B,IAAlE,EAAwE;AACtE,eAAK,kBAAL,GAA0B,KAA1B;AACD,SAFD,MAEO;AACL,eAAK,kBAAL,GAA0B,IAA1B;AACD;AACF;AAGD;;;;;;AAIA,MAAA,QAAQ,GAAA;AACN;AACA;AACA;AACA;AACA;AACA;AAEA,aAAK,cAAL,GAAsB,IAAtB,CARM,CAQsB;AAC5B;;AACA,cAAM,UAAU,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,QAAvC,CAVM,CAWN;;AACA,aAAK,cAAL;AAEA,cAAM,qBAAqB,GAAG,KAAK,SAAL,CAAe,IAAf,CAAoB,CAAC,IAAI,CAAC,CAAC,KAAF,IAAW,2DAAA,CAAA,WAAA,CAAA,CAAU,cAA9C,CAA9B;AACA,aAAK,WAAL,CAAiB,GAAjB,CAAqB,UAArB,EAAiC,QAAjC,CAA0C,qBAAqB,CAAC,KAAhE;AACA,cAAM,cAAc,GAAG,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,CAAC,IAAI,CAAC,CAAC,GAAF,IAAS,2DAAA,CAAA,WAAA,CAAA,CAAU,oBAAnD,CAAvB;AACA,aAAK,WAAL,CAAiB,GAAjB,CAAqB,cAArB,EAAqC,QAArC,CAA8C,cAAc,CAAC,GAA7D;AAEA,aAAK,IAAL,GAAY,KAAK,MAAL,CAAY,GAAxB;;AACA,YAAI,KAAK,IAAL,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,IAA7B,CAAJ,EAAwC;AACtC,eAAK,KAAL,GAAa,2DAAA,CAAA,WAAA,CAAA,CAAU,gBAAvB;;AACA,cAAI,CAAC,KAAK,kBAAV,EAA8B;AAC5B,iBAAK,cAAL,GAAsB,IAAtB;AACD;AACF,SALD,MAKO,IAAI,KAAK,IAAL,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,SAA7B,CAAJ,EAA6C;AAClD,eAAK,KAAL,GAAa,2DAAA,CAAA,WAAA,CAAA,CAAU,eAAvB;;AACA,cAAI,CAAC,KAAK,iBAAV,EAA6B;AAC3B,iBAAK,cAAL,GAAsB,IAAtB;AACD;AACF,SA9BK,CAgCN;;;AACA,aAAK,WAAL,GAAmB,KAAK,KAAL,CAAW,QAAX,CAAoB,IAApB,CAAyB,YAAzB,CAAnB;;AAEA,YAAI,KAAK,WAAL,IAAoB,KAAK,WAAL,CAAiB,MAAjB,GAA0B,CAAlD,EAAqD;AACnD,eAAK,UAAL,GAAkB,KAAK,WAAL,CAAiB,CAAjB,CAAlB;AACA,eAAK,IAAL,GAAY,IAAZ;AACA,eAAK,uBAAL;AACD,SAJD,MAIO;AACL,cAAI,KAAK,IAAL,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,SAA7B,CAAJ,EAA6C;AAC3C,iBAAK,aAAL,CAAmB,KAAK,cAAxB;AACD,WAFD,MAEO;AACL;AACA,iBAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,2DAAA,CAAA,WAAA,CAAA,CAAU,cAAX,CAArB;AACD;AACF,SA9CK,CAgDN;;;AACA,aAAK,IAAL,GAAY,KAAK,KAAL,CAAW,QAAX,CAAoB,IAApB,CAAyB,MAAzB,CAAZ,CAjDM,CAmDN;;AACA,YAAI,KAAK,IAAL,IAAa,IAAjB,EAAuB;AAErB,cAAI,YAAY,GAAQ,KAAK,IAAL,CAAU,MAAV,CAAiB,CAAC,IACxC,CAAC,CAAC,eAAF,IAAqB,KAAK,cADJ,CAAxB;;AAEA,cAAI,YAAY,IAAI,IAAhB,IAAwB,YAAY,CAAC,MAAb,GAAsB,CAAlD,EAAqD;AACnD,gBAAI,SAAS,GAAa,YAAY,CAAC,CAAD,CAAtC;AACA,iBAAK,kBAAL,GAA0B,SAAS,CAAC,GAApC;AACD;;AACD,eAAK,IAAL,CAAU,IAAV,CAAe,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,GAAF,CAAM,aAAN,CAAoB,CAAC,CAAC,GAAtB,CAAzB;AACD;AACF;AAEC;;;;;;;AAKF,MAAA,MAAM,GAAA;AACJ,QAAA,yCAAA,CAAA,MAAA,CAAA,CAAK,OAAL,CAAa;AAAE,UAAA,MAAM,EAAE;AAAV,SAAb;;AAEA,YAAI,QAAQ,yCAAA,CAAA,MAAA,CAAA,CAAK,eAAL,EAAZ,EAAoC;AAClC;AACA,UAAA,YAAY,CAAC,KAAb,GAFkC,CAGlC;AACA;;AACA,gBAAM,iBAAiB,GAAG,MAAM,CAAC,QAAP,CAAgB,IAA1C;AACA,UAAA,MAAM,CAAC,QAAP,CAAgB,IAAhB,GAAuB,0DAAA,CAAA,aAAA,CAAA,CAAY,WAAZ,GAA0B,YAA1B,GAAyC,iBAAhE;AACD;AACF;AAGD;;;;;AAGA,MAAA,cAAc,GAAA;AACZ,aAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,KAAjB,CAAuB;AACxC,UAAA,UAAU,EAAE,CAAC,EAAD,EAAK,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EACpC,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,2DAAA,CAAA,WAAA,CAAA,CAAU,iBAA/B,CADoC,EACe,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,iBAAnB,CADf,CAAnB,CAAL,CAD4B;AAGxC,UAAA,SAAS,EAAE,CAAC,EAAD,EAAK,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,cAAnB,CAAtB,CAAnB,CAAL,CAH6B;AAIxC,UAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,GAAwB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,cAAnB,CAAxB,CAAnB,CAAL,CAJ8B;AAKxC,UAAA,YAAY,EAAE,CAAC,EAAD,EAAK,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,KAAZ,CAAL,CAL0B;AAMxC,UAAA,YAAY,EAAE,CAAC,EAAD,EAAK,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAhB,CAN0B;AAOxC,UAAA,YAAY,EAAE,CAAC,2DAAA,CAAA,WAAA,CAAA,CAAU,qBAAX,EAAkC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAA7C,CAP0B;AAQxC,UAAA,GAAG,EAAE,CAAC,KAAK,cAAN,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAjC,CARmC;AASxC,UAAA,QAAQ,EAAE,CAAC,2DAAA,CAAA,WAAA,CAAA,CAAU,gBAAX,CAT8B;AAUxC,UAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAhB,CAV8B;AAWxC,UAAA,UAAU,EAAE,CAAC,EAAD,CAX4B;AAYxC,UAAA,wBAAwB,EAAE,CAAC,2DAAA,CAAA,WAAA,CAAA,CAAU,sBAAX,CAZc;AAaxC,UAAA,OAAO,EAAE,CAAC,2DAAA,CAAA,WAAA,CAAA,CAAU,QAAX,CAb+B;AAcxC,UAAA,KAAK,EAAE,KAAK,WAAL,CAAiB,KAAjB,CAAuB,KAAK,KAA5B,EAAmC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAA9C,CAdiC;AAexC,UAAA,mBAAmB,EAAE;AAfmB,SAAvB,CAAnB;AAiBD;AAED;;;;;;AAIA,MAAA,uBAAuB,GAAA;AACrB,YAAI,KAAK,IAAL,IAAa,IAAjB,EAAuB;AACrB,cAAI,KAAK,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,iBAAK,kBAAL,GAA0B,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,UAAvB,CAA1B,CAD2B,CAE3B;AACA;AACA;;AACA,gBAAI,KAAK,SAAL,CAAe,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,mBAAK,UAAL,CAAgB,KAAhB,GAAwB,EAAxB;AACA,mBAAK,kBAAL,CAAwB,KAAxB,GAAgC,EAAhC;;AACA,mBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,SAAL,CAAe,MAAnC,EAA2C,CAAC,EAA5C,EAAgD;AAC9C,qBAAK,UAAL,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,KAAK,SAAL,CAAe,CAAf,CAA3B;AACA,qBAAK,kBAAL,CAAwB,KAAxB,CAA8B,IAA9B,CAAmC,KAAK,SAAL,CAAe,CAAf,CAAnC;AACD;AACF,aAPD,MAOO;AACL,mBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,UAAL,CAAgB,KAAhB,CAAsB,MAA1C,EAAkD,CAAC,EAAnD,EAAuD;AACrD,qBAAK,SAAL,CAAe,IAAf,CAAoB,KAAK,UAAL,CAAgB,KAAhB,CAAsB,CAAtB,CAApB;AACD;AACF,aAhB0B,CAiB3B;;;AACA,iBAAK,aAAL,CAAmB,KAAK,kBAAL,CAAwB,GAA3C,EAlB2B,CAmB3B;;AACA,gBAAI,KAAK,UAAL,CAAgB,cAApB,EAAoC;AAClC,mBAAK,yBAAL,GAAiC,IAAjC;AACA,mBAAK,4BAAL,GAAoC,IAApC;AACA,mBAAK,cAAL,CAAoB,yBAApB,GAAgD,IAAhD;AACD,aAJD,MAIO;AACL,mBAAK,yBAAL,GAAiC,KAAjC;AACA,mBAAK,cAAL,CAAoB,yBAApB,GAAgD,KAAhD;AACA,mBAAK,4BAAL,GAAoC,KAApC;AACD,aA5B0B,CA6B3B;;;AACA,gBAAI,CAAC,KAAK,UAAL,CAAgB,eAAjB,IAAoC,KAAK,UAAL,CAAgB,eAAhB,IAAmC,IAA3E,EAAiF;AAC/E,mBAAK,kBAAL,GAA0B,KAA1B;AACA,mBAAK,qBAAL,GAA6B,KAA7B;AACA,mBAAK,uBAAL,GAA+B,KAA/B;AACA,mBAAK,qBAAL,GAA6B,2DAAA,CAAA,WAAA,CAAA,CAAU,aAAvC;AACD,aALD,MAKO;AACL,mBAAK,uBAAL,GAA+B,IAA/B;AACA,mBAAK,qBAAL,GAA6B,2DAAA,CAAA,WAAA,CAAA,CAAU,WAAvC;AACA,mBAAK,qBAAL,GAA6B,KAA7B;AACA,mBAAK,kBAAL,GAA0B,IAA1B;AACA,mBAAK,4BAAL,GAAoC,IAApC;AACA,mBAAK,WAAL,CAAiB,QAAjB,CAA0B,WAA1B,EAAuC,OAAvC;AACA,mBAAK,WAAL,CAAiB,QAAjB,CAA0B,UAA1B,EAAsC,OAAtC;AACA,mBAAK,WAAL,CAAiB,QAAjB,CAA0B,cAA1B,EAA0C,OAA1C;AACA,mBAAK,WAAL,CAAiB,QAAjB,CAA0B,OAA1B,EAAmC,OAAnC;AACA,mBAAK,WAAL,CAAiB,QAAjB,CAA0B,qBAA1B,EAAiD,OAAjD;AACD,aA9C0B,CAgD3B;;;AACA,iBAAK,WAAL,CAAiB,UAAjB,CAA4B;AAC1B,cAAA,UAAU,EAAE,KAAK,kBAAL,CAAwB,UADV;AAE1B,cAAA,GAAG,EAAE,KAAK,kBAAL,CAAwB,GAFH;AAG1B,cAAA,SAAS,EAAE,KAAK,kBAAL,CAAwB,SAHT;AAI1B,cAAA,QAAQ,EAAE,KAAK,kBAAL,CAAwB,QAJR;AAK1B,cAAA,IAAI,EAAE,KAAK,kBAAL,CAAwB,KALJ;AAM1B,cAAA,YAAY,EAAE,KAAK,kBAAL,CAAwB;AANZ,aAA5B;AASA,iBAAK,WAAL,CAAiB,QAAjB,CAA0B,YAA1B,EAAwC,OAAxC;AACD;AACF;AACF;AAED;;;;;;;AAKA,MAAA,yBAAyB,CAAC,KAAD,EAAW;AAClC,aAAK,aAAL,GAAqB,KAAK,CAAC,KAA3B;AACD;AAED;;;;;;AAIA,MAAA,yBAAyB,CAAC,KAAD,EAAW;AAClC,aAAK,UAAL,GAAkB,IAAlB;AACA,aAAK,yBAAL,GAAiC,KAAK,CAAC,OAAvC;AACA,aAAK,cAAL,CAAoB,yBAApB,GAAgD,KAAK,CAAC,OAAtD;;AACA,YAAI,KAAK,CAAC,OAAV,EAAmB;AACjB,eAAK,qBAAL,GAA6B,KAA7B;AACD;AACF;AAED;;;;;;AAIA,MAAA,gBAAgB,CAAC,KAAD,EAAW;AACzB,YAAI,CAAC,KAAK,4BAAN,IAAsC,KAAK,yBAA/C,EAA0E;AACxE,eAAK,yBAAL,GAAiC,KAAjC;AACA,eAAK,cAAL,CAAoB,yBAApB,GAAgD,KAAhD;AACD;;AAED,aAAK,UAAL,GAAkB,IAAlB;AACA,aAAK,qBAAL,GAA6B,KAAK,CAAC,OAAnC;AACD;AAED;;;;;AAGA,MAAA,gBAAgB,GAAA;AACd,YAAI,KAAK,IAAT,EAAe;AACb,eAAK,UAAL,GAAkB,IAAlB;AACD;AACF;AAED;;;;;AAGA,MAAA,WAAW,GAAA;AACT,YAAI,KAAK,IAAL,IAAa,KAAK,WAAL,CAAiB,KAA9B,IAAuC,KAAK,UAAL,IAAmB,IAA9D,EAAoE;AAElE,gBAAM,UAAU,GAAG,IAAI,oFAAA,CAAA,oBAAA,CAAJ,EAAnB;AACA,gBAAM,SAAS,GAAG,KAAK,MAAL,CAAY,IAAZ,CAAiB,oFAAA,CAAA,wBAAA,CAAjB,EAAyC;AAAE,YAAA,IAAI,EAAE;AAAR,WAAzC,CAAlB;AAEA,UAAA,SAAS,CAAC,WAAV,GAAwB,SAAxB,CAAkC,YAAY,IAAG;AAC/C,iBAAK,WAAL,GAAmB,YAAnB;;AACA,gBAAI,KAAK,WAAT,EAAsB;AACpB,mBAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,2DAAA,CAAA,WAAA,CAAA,CAAU,cAAX,CAArB;AACD;AACF,WALD;AAMD,SAXD,MAWO;AACL,eAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,2DAAA,CAAA,WAAA,CAAA,CAAU,cAAX,CAArB;AACD;AACF;AAED;;;;;;;AAKA,MAAA,aAAa,CAAC,OAAD,EAAgB;AAC3B,aAAK,MAAL,CAAY,IAAZ,CAAiB,6DAA6D,OAA9E;AACA,aAAK,qBAAL,CAA2B,YAA3B,CAAwC,OAAxC,EAAiD,KAAK,aAAtD,EAAqE,SAArE,CAEK,IAAD,IAAc;AACZ,eAAK,KAAL,GAAa,EAAb;AACA,eAAK,aAAL,GAAqB,KAArB;;AACA,cAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,gBAAI,WAAW,GAAa,IAA5B;;AACA,gBAAI,WAAW,CAAC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,mBAAK,aAAL,GAAqB,IAArB;AACA,mBAAK,KAAL,GAAqB,WAArB;AACA,mBAAK,KAAL,CAAW,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,WAAF,CAAc,aAAd,CAA4B,CAAC,CAAC,WAA9B,CAA1B,EAH0B,CAI1B;;AACA,kBAAI,KAAK,IAAT,EAAe;AACb,qBAAK,mBAAL;AACD;AACF;AACF;AACF,SAjBL,EAkBK,KAAD,IAAe;AACb,eAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB;AACD,SApBL;AAsBD;AAED;;;;;AAGA,MAAA,mBAAmB,GAAA;AACjB,YAAI,KAAK,KAAL,CAAW,MAAX,GAAoB,CAAxB,EAA2B;AACzB,gBAAM,WAAW,GAAc,KAAK,WAAL,CAAiB,GAAjB,CAAqB,OAArB,CAA/B;AACA,cAAI,WAAW,GAAa,KAAK,kBAAL,CAAwB,KAApD;;AACA,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,iBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,KAAL,CAAW,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,kBAAI,KAAK,KAAL,CAAW,CAAX,EAAc,EAAd,IAAoB,WAAW,CAAC,CAAD,CAAnC,EAAwC;AACtC,qBAAK,KAAL,CAAW,CAAX,EAAc,SAAd,GAA0B,IAA1B;AACA,gBAAA,WAAW,CAAC,IAAZ,CAAiB,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,KAAK,KAAL,CAAW,CAAX,EAAc,EAA9B,CAAjB;AACD;AACF;AACF;AACF;AACF;AAED;;;;;;AAIA,MAAA,kBAAkB,CAAC,KAAD,EAAM;AACtB,aAAK,UAAL,GAAkB,IAAlB;AACA,cAAM,WAAW,GAAc,KAAK,WAAL,CAAiB,GAAjB,CAAqB,OAArB,CAA/B;;AACA,YAAI,KAAK,CAAC,OAAV,EAAmB;AACjB,UAAA,WAAW,CAAC,IAAZ,CAAiB,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,KAAK,CAAC,MAAN,CAAa,KAA7B,CAAjB;;AACA,cAAI,KAAK,IAAT,EAAe;AACb,iBAAK,kBAAL,CAAwB,KAAxB,CAA8B,IAA9B,CAAmC,KAAK,CAAC,MAAN,CAAa,KAAhD;AACD;AACF,SALD,MAKO;AACL,gBAAM,CAAC,GAAG,WAAW,CAAC,QAAZ,CAAqB,SAArB,CAA+B,CAAC,IAAI,CAAC,CAAC,KAAF,KAAY,KAAK,CAAC,MAAN,CAAa,KAA7D,CAAV;AACA,UAAA,WAAW,CAAC,QAAZ,CAAqB,CAArB;;AACA,cAAI,KAAK,IAAT,EAAe;AACb,kBAAM,KAAK,GAAW,KAAK,kBAAL,CAAwB,KAAxB,CAA8B,OAA9B,CAAsC,KAAK,CAAC,MAAN,CAAa,KAAnD,CAAtB;;AACA,gBAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,mBAAK,kBAAL,CAAwB,KAAxB,CAA8B,MAA9B,CAAqC,KAArC,EAA4C,CAA5C;AACD;AACF;AACF;AACF;AAED;;;;;;;AAKA,MAAA,iBAAiB,CAAC,MAAD,EAAe;AAC9B,cAAM,WAAW,GAAc,KAAK,WAAL,CAAiB,GAAjB,CAAqB,OAArB,CAA/B;AACA,QAAA,WAAW,CAAC,IAAZ,CAAiB,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,MAAhB,CAAjB;AACD;AAED;;;;;AAGA,MAAA,KAAK,GAAA;AACH,aAAK,KAAL,GAAa,EAAb;AACA,aAAK,kBAAL,CAAwB,KAAxB,GAAgC,EAAhC;AACA,cAAM,WAAW,GAAc,KAAK,WAAL,CAAiB,GAAjB,CAAqB,OAArB,CAA/B;AACA,YAAI,aAAa,GAAa,EAA9B;;AACA,YAAI,WAAW,IAAI,IAAf,IAAuB,WAAW,CAAC,MAAZ,IAAsB,CAAjD,EAAoD;AAClD,UAAA,aAAa,GAAG,WAAW,CAAC,KAAZ,CAAkB,QAAlB,GAA6B,KAA7B,CAAmC,GAAnC,CAAhB;;AACA,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,aAAa,CAAC,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC7C,kBAAM,CAAC,GAAG,WAAW,CAAC,QAAZ,CAAqB,SAArB,CAA+B,CAAC,IAAI,CAAC,CAAC,KAAF,IAAW,aAAa,CAAC,CAAD,CAA5D,CAAV;AACA,YAAA,WAAW,CAAC,QAAZ,CAAqB,CAArB;AACA,kBAAM,KAAK,GAAW,KAAK,kBAAL,CAAwB,KAAxB,CAA8B,OAA9B,CAAsC,aAAa,CAAC,CAAD,CAAnD,CAAtB;;AACA,gBAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,mBAAK,kBAAL,CAAwB,KAAxB,CAA8B,MAA9B,CAAqC,KAArC,EAA4C,CAA5C;AACD;AACF;AACF;;AACD,aAAK,uBAAL;AACA,aAAK,UAAL,GAAkB,KAAlB;AACD;AAED;;;;;;;;AAMA,MAAA,IAAI,GAAA;AACF,YAAI,SAAJ;AACA,YAAI,QAAJ;AACA,YAAI,KAAJ;AACA,YAAI,KAAJ;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAK,WAAL,CAAiB,QAA7B,EAAuC,OAAvC,CAAgD,GAAD,IAAgB;AAC7D,gBAAM,eAAe,GAAG,KAAK,WAAL,CAAiB,GAAjB,CAAqB,GAArB,CAAxB;;AACA,cAAI,eAAe,YAAY,2CAAA,CAAA,WAAA,CAA/B,EAA0C,CACzC,CADD,MACO,IAAK,GAAD,IAAS,YAAb,EAA2B;AAChC,YAAA,KAAK,GAAG,eAAe,CAAC,KAAxB;AACA,iBAAK,WAAL,CAAiB,GAAjB,CAAqB,YAArB,EAAmC,QAAnC,CAA4C,eAAe,CAAC,KAA5D;AACD,WAHM,MAGA,IAAK,GAAD,IAAS,WAAb,EAA0B;AAC/B,YAAA,SAAS,GAAG,eAAe,CAAC,KAA5B;AACD,WAFM,MAEA,IAAK,GAAD,IAAS,UAAb,EAAyB;AAC9B,YAAA,QAAQ,GAAG,eAAe,CAAC,KAA3B;AACD,WAFM,MAEA,IAAK,GAAD,IAAS,cAAb,EAA6B;AAClC,YAAA,KAAK,GAAG,eAAe,CAAC,KAAxB;AACD,WAFM,MAEA;AACL,iBAAK,MAAL,CAAY,IAAZ,CAAiB,wBAAwB,eAAe,CAAC,KAAzD;AACD;AACF,SAfD,EALE,CAqBF;;AACA,YAAI,KAAK,IAAL,IAAa,IAAjB,EAAuB;AACrB,cAAI,WAAW,GAAG,IAAI,8DAAA,CAAA,aAAA,CAAJ,EAAlB;AACA,UAAA,WAAW,GAAG,KAAK,kBAAnB;AACA,UAAA,WAAW,CAAC,SAAZ,GAAwB,SAAxB;AACA,UAAA,WAAW,CAAC,QAAZ,GAAuB,QAAvB;AACA,UAAA,WAAW,CAAC,YAAZ,GAA2B,KAA3B;AACA,UAAA,WAAW,CAAC,OAAZ,GAAsB,2DAAA,CAAA,WAAA,CAAA,CAAU,QAAhC,CANqB,CAOrB;;AACA,cAAI,WAAW,CAAC,YAAZ,IAA4B,EAAhC,EAAoC;AAClC,YAAA,WAAW,CAAC,YAAZ,GAA2B,IAA3B;AACD;;AACD,eAAK,iBAAL,GAAyB,IAAzB;;AACA,cAAI,KAAK,UAAL,CAAgB,cAAhB,IAAkC,KAAK,cAAL,CAAoB,yBAA1D,EAAqF;AACnF;AACA;AACA,iBAAK,6BAAL,CAAmC,KAAnC,EAA0C,WAA1C;AACD,WAJD,MAIO;AACL,gBAAI,KAAK,qBAAT,EAAgC;AAC9B;AACA,mBAAK,gBAAL,CAAsB,KAAtB,EAA6B,WAA7B;AACD,aAHD,MAGO;AACL;AACA,mBAAK,iBAAL,CAAuB,WAAvB;AACD;AACF;AACF,SAzBD,MAyBO;AACL;AACA,eAAK,cAAL;AACD;AACF;AAED;;;;;;;;AAMA,MAAA,gBAAgB,CAAC,KAAD,EAAgB,WAAhB,EAAwC;AACtD,aAAK,MAAL,CAAY,IAAZ,CAAiB,+DAAjB;AACA,aAAK,UAAL,GAAkB,IAAI,6DAAA,CAAA,YAAA,CAAJ,EAAlB;;AACA,YAAI,KAAK,qBAAT,EAAgC;AAC9B,cAAI,CAAC,KAAK,uBAAV,EAAmC;AACjC,iBAAK,UAAL,CAAgB,uBAAhB,GAA0C,2DAAA,CAAA,WAAA,CAAA,CAAU,cAApD;AACD,WAFD,MAEO;AACL,iBAAK,UAAL,CAAgB,uBAAhB,GAA0C,2DAAA,CAAA,WAAA,CAAA,CAAU,eAApD;AACD;AACF;;AACD,aAAK,qBAAL,CAA2B,oBAA3B,CAAgD,KAAK,cAArD,EAAqE,KAArE,EAA4E,KAAK,UAAjF,EAA6F,SAA7F,CAEK,IAAD,IAAc;AACZ;AACA,cAAI,KAAK,mBAAL,EAAJ,EAAgC;AAC9B,iBAAK,iBAAL,CAAuB,WAAvB;AACD,WAFD,MAEO;AACL,iBAAK,MAAL,CAAY,aAAZ,CAA0B,2DAAA,CAAA,WAAA,CAAA,CAAU,8BAApC,EACE,2DAAA,CAAA,WAAA,CAAA,CAAU,4BADZ;AAEA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,wDACf,2DAAA,CAAA,WAAA,CAAA,CAAU,8BADZ,EAC4C,2DAAA,CAAA,WAAA,CAAA,CAAU,4BADtD;AAEA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACA,iBAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD;AACF,SAdL,EAeK,KAAD,IAAe;AACb,eAAK,iBAAL,GAAyB,KAAzB;AACA,eAAK,mBAAL,GAA2B,KAA3B;;AACA,cAAI,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,QAAtC,CAA+C,GAA/C,CAAJ,EAAyD;AACvD,iBAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAAxB,EACE,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CADF;AAEA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,wDAChB,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CADF,EAEE,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAFF;AAGD,WAND,MAMO;AACL,iBAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,mBAAL,CAAyB,YAAjD;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,mBAAL,CAAyB,WAA3C;AACD;;AACD,eAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,UAAvB;AACD,SA7BL;AA+BD;AAED;;;;;;;;AAMA,MAAA,6BAA6B,CAAC,KAAD,EAAgB,WAAhB,EAAwC;AACnE,aAAK,MAAL,CAAY,IAAZ,CAAiB,uEAAjB;AACA,aAAK,qBAAL,CAA2B,uBAA3B,CAAmD,KAAK,cAAxD,EAAwE,KAAxE,EAA+E,KAAK,cAApF,EAAoG,SAApG,CAEK,IAAD,IAAc;AACZ;AACA,cAAI,KAAK,mBAAL,EAAJ,EAAgC;AAC9B,iBAAK,iBAAL,CAAuB,WAAvB;AACD,WAFD,MAEO;AACL,iBAAK,MAAL,CAAY,aAAZ,CAA0B,2DAAA,CAAA,WAAA,CAAA,CAAU,8BAApC,EACE,2DAAA,CAAA,WAAA,CAAA,CAAU,4BADZ;AAEA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,gEACf,2DAAA,CAAA,WAAA,CAAA,CAAU,8BADZ,EAC4C,2DAAA,CAAA,WAAA,CAAA,CAAU,4BADtD;AAEA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACA,iBAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD;AACF,SAdL,EAeK,KAAD,IAAe;AACb,eAAK,iBAAL,GAAyB,KAAzB;AACA,eAAK,mBAAL,GAA2B,KAA3B;;AACA,cAAI,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,QAAtC,CAA+C,GAA/C,CAAJ,EAAyD;AACvD,iBAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAAxB,EACE,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CADF;AAEA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,gEAChB,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CADF,EAEE,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAFF;AAGD,WAND,MAMO;AACL,iBAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,mBAAL,CAAyB,YAAjD;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,mBAAL,CAAyB,WAA3C;AACD;;AACD,eAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,cAAvB;AACD,SA7BL;AA+BD;AAED;;;;;;AAIA,MAAA,mBAAmB,GAAA;AACjB,YAAI,YAAY,GAAG,KAAnB;;AACA,YAAI,KAAK,kBAAL,CAAwB,SAAxB,IAAqC,KAAK,UAAL,CAAgB,SAAzD,EAAoE;AAClE,UAAA,YAAY,GAAG,IAAf;AACD;;AACD,YAAI,KAAK,kBAAL,CAAwB,QAAxB,IAAoC,KAAK,UAAL,CAAgB,QAAxD,EAAkE;AAChE,UAAA,YAAY,GAAG,IAAf;AACD;;AACD,YAAI,KAAK,kBAAL,CAAwB,YAAxB,IAAwC,KAAK,UAAL,CAAgB,YAA5D,EAA0E;AACxE,UAAA,YAAY,GAAG,IAAf;AACD;;AACD,YAAI,IAAI,CAAC,SAAL,CAAe,KAAK,kBAAL,CAAwB,KAAvC,KAAiD,IAAI,CAAC,SAAL,CAAe,KAAK,SAApB,CAArD,EAAqF;AACnF,UAAA,YAAY,GAAG,IAAf;AACD;;AACD,eAAO,YAAP;AACD;AAED;;;;;;;;AAMA,MAAA,iBAAiB,CAAC,WAAD,EAAyB;AACxC,aAAK,MAAL,CAAY,IAAZ,CAAiB,0DAAjB;AACA,aAAK,qBAAL,CAA2B,qBAA3B,CAAiD,WAAjD,EAA8D,SAA9D,CAEK,IAAD,IAAc;AACZ,eAAK,iBAAL,GAAyB,KAAzB;;AACA,cAAI,IAAI,YAAY,MAApB,EAA4B;AAC1B,iBAAK,mBAAL,GAA2B,IAA3B;AACA,iBAAK,MAAL,CAAY,aAAZ,CAA0B,2DAAA,CAAA,WAAA,CAAA,CAAU,8BAApC,EACE,2DAAA,CAAA,WAAA,CAAA,CAAU,4BADZ;AAEA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,2CACf,2DAAA,CAAA,WAAA,CAAA,CAAU,8BADZ,EAC4C,2DAAA,CAAA,WAAA,CAAA,CAAU,4BADtD;AAEA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACA,iBAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD,WARD,MAQO;AACL,iBAAK,uBAAL,GAA+B,IAA/B;;AACA,gBAAI,KAAK,uBAAL,IAAgC,IAApC,EAA0C;AACxC,kBAAI,MAAM,GAAG,KAAK,uBAAL,CAA6B,KAA7B,CAAmC,GAAnC,CAAb;;AACA,kBAAI,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,GAAqB,QAArB,CAA8B,2DAAA,CAAA,WAAA,CAAA,CAAU,sBAAV,CAAiC,QAAjC,EAA9B,KACD,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,+BAAV,CAA0C,QAA1C,EAAnB,CADC,IAED,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,qBAAV,CAAgC,QAAhC,EAAnB,CAFC,IAGD,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,0BAAV,CAAqC,QAArC,EAAnB,CAHC,IAID,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,uBAAV,CAAkC,QAAlC,EAAnB,CAJH,EAIsE;AACpE,qBAAK,MAAL,CAAY,WAAZ,CAAwB,MAAM,CAAC,CAAD,CAA9B,EAAmC,MAAM,CAAC,CAAD,CAAzC;AACA,qBAAK,MAAL,CAAY,KAAZ,CAAkB,oDAAoD,MAAM,CAAC,CAAD,CAA5E,EAAiF,MAAM,CAAC,CAAD,CAAvF;AACA,qBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACD,eARD,MAQO;AACL,qBAAK,MAAL,CAAY,aAAZ,CAA0B,MAAM,CAAC,CAAD,CAAhC,EAAqC,MAAM,CAAC,CAAD,CAA3C;AACA,qBAAK,MAAL,CAAY,IAAZ,CAAiB,gDAAgD,MAAM,CAAC,CAAD,CAAvE,EAA4E,MAAM,CAAC,CAAD,CAAlF;AACA,qBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACA,qBAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD;AACF;AACF;AACF,SAhCL,EAiCK,KAAD,IAAe;AACb,eAAK,iBAAL,GAAyB,KAAzB;AACA,eAAK,mBAAL,GAA2B,KAA3B;;AACA,cAAI,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,QAAtC,CAA+C,GAA/C,CAAJ,EAAyD;AACvD,iBAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAAxB,EACE,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CADF;AAEA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,+CAChB,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CADF,EAEE,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAFF;AAGD,WAND,MAMO;AACL,iBAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,mBAAL,CAAyB,YAAjD;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,mBAAL,CAAyB,WAA3C;AACD;;AACD,eAAK,MAAL,CAAY,KAAZ,CAAkB,WAAlB;AACD,SA/CL;AAiDD;AAED;;;;;;;AAKA,MAAA,cAAc,GAAA;AACZ;AACA,YAAI,WAAW,GAAG,IAAI,yDAAA,CAAA,SAAA,CAAJ,EAAlB;AACA,QAAA,WAAW,GAAG,KAAK,WAAL,CAAiB,KAA/B;;AACA,YAAI,WAAW,CAAC,YAAZ,IAA4B,EAAhC,EAAoC;AAClC,UAAA,WAAW,CAAC,YAAZ,GAA2B,IAA3B;AACD;;AACD,aAAK,MAAL,CAAY,IAAZ,CAAiB,mDAAmD,WAApE;AACA,aAAK,iBAAL,GAAyB,IAAzB;AACA,aAAK,qBAAL,CAA2B,eAA3B,CAA2C,WAA3C,EAAwD,SAAxD,CAEK,IAAD,IAAc;AACZ,eAAK,iBAAL,GAAyB,KAAzB;;AACA,cAAI,IAAI,YAAY,MAApB,EAA4B;AAC1B,iBAAK,KAAL,GAAa,EAAb;AACA,iBAAK,aAAL,CAAmB,KAAK,cAAxB;AACA,iBAAK,mBAAL,GAA2B,IAA3B;AACA,iBAAK,MAAL,CAAY,aAAZ,CAA0B,2DAAA,CAAA,WAAA,CAAA,CAAU,2BAApC,EACE,2DAAA,CAAA,WAAA,CAAA,CAAU,yBADZ;AAEA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,qCACf,2DAAA,CAAA,WAAA,CAAA,CAAU,2BADZ,EAEE,2DAAA,CAAA,WAAA,CAAA,CAAU,yBAFZ;AAGA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACA,iBAAK,WAAL,CAAiB,KAAjB;AACA,iBAAK,QAAL;AACD,WAZD,MAYO;AACL,iBAAK,uBAAL,GAA+B,IAA/B;;AACA,gBAAI,KAAK,uBAAL,IAAgC,IAApC,EAA0C;AACxC,kBAAI,MAAM,GAAG,KAAK,uBAAL,CAA6B,KAA7B,CAAmC,GAAnC,CAAb;;AACA,kBAAI,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,GAAqB,QAArB,CAA8B,2DAAA,CAAA,WAAA,CAAA,CAAU,sBAAV,CAAiC,QAAjC,EAA9B,KACD,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,+BAAV,CAA0C,QAA1C,EAAnB,CADC,IAED,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,qBAAV,CAAgC,QAAhC,EAAnB,CAFC,IAGD,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,uBAAV,CAAkC,QAAlC,EAAnB,CAHH,EAGsE;AACpE,qBAAK,MAAL,CAAY,WAAZ,CAAwB,MAAM,CAAC,CAAD,CAA9B,EAAmC,MAAM,CAAC,CAAD,CAAzC;AACA,qBAAK,MAAL,CAAY,KAAZ,CAAkB,8CAA8C,MAAM,CAAC,CAAD,CAAtE,EAA2E,MAAM,CAAC,CAAD,CAAjF;AACA,qBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACD,eAPD,MAOO,IAAI,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,CAAmB,2DAAA,CAAA,WAAA,CAAA,CAAU,oBAAV,CAA+B,QAA/B,EAAnB,CAAJ,EAAmE;AACxE,qBAAK,MAAL,CAAY,aAAZ,CAA0B,MAAM,CAAC,CAAD,CAAhC,EAAqC,MAAM,CAAC,CAAD,CAA3C;AACA,qBAAK,MAAL,CAAY,KAAZ,CAAkB,8CAA8C,MAAM,CAAC,CAAD,CAAtE,EAA2E,MAAM,CAAC,CAAD,CAAjF;AACA,qBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACD,eAJM,MAIA;AACL,qBAAK,KAAL,GAAa,EAAb;AACA,qBAAK,aAAL,CAAmB,KAAK,cAAxB;AACA,qBAAK,MAAL,CAAY,aAAZ,CAA0B,MAAM,CAAC,CAAD,CAAhC,EAAqC,MAAM,CAAC,CAAD,CAA3C;AACA,qBAAK,MAAL,CAAY,IAAZ,CAAiB,0CAA0C,MAAM,CAAC,CAAD,CAAjE,EAAsE,MAAM,CAAC,CAAD,CAA5E;AACA,qBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACA,qBAAK,WAAL,CAAiB,KAAjB;AACA,qBAAK,QAAL;AACD;AACF;AACF;AACF,SA1CL,EA2CK,KAAD,IAAe;AACb,eAAK,iBAAL,GAAyB,KAAzB;AACA,eAAK,mBAAL,GAA2B,KAA3B;;AACA,cAAI,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,QAAtC,CAA+C,GAA/C,CAAJ,EAAyD;AACvD,gBAAI,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,EAAoD,QAApD,CACF,2DAAA,CAAA,WAAA,CAAA,CAAU,oBAAV,CAA+B,QAA/B,EADE,CAAJ,EAC8C;AAC5C,mBAAK,MAAL,CAAY,aAAZ,CAA0B,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAA1B,EACE,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CADF;AAEA,mBAAK,MAAL,CAAY,KAAZ,CAAkB,yCAChB,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CADF,EAEE,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAFF;AAGD,aAPD,MAOO;AACL,mBAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAAxB,EACE,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CADF;AAEA,mBAAK,MAAL,CAAY,KAAZ,CAAkB,yCAChB,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CADF,EAEE,KAAK,mBAAL,CAAyB,YAAzB,CAAsC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAFF;AAGD;AACF,WAfD,MAeO;AACL,iBAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,mBAAL,CAAyB,YAAjD;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,mBAAL,CAAyB,WAA3C;AACD;;AACD,eAAK,MAAL,CAAY,KAAZ,CAAkB,WAAlB;AACD,SAlEL;AAoEA,aAAK,WAAL,CAAiB,cAAjB;AACA,aAAK,WAAL,CAAiB,eAAjB;AACD;;AAr3B6B,KAAhC;;;YA8L6B,4CAAA,CAAA,gBAAA;;YACT,uCAAA,CAAA,WAAA;;YACK,2CAAA,CAAA,aAAA;;YACL,4CAAA,CAAA,QAAA;;YACe,2EAAA,CAAA,uBAAA;;YAChB,kDAAA,CAAA,eAAA;;YACG,gDAAA,CAAA,kBAAA;;YACH,qDAAA,CAAA,eAAA;;YACA,+CAAA,CAAA,WAAA;;;AAtMN,IAAA,mBAAmB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL/B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,gBADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,0GAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK+B,E,uEA8LH,4CAAA,CAAA,gBAAA,C,EACT,uCAAA,CAAA,WAAA,C,EACK,2CAAA,CAAA,aAAA,C,EACL,4CAAA,CAAA,QAAA,C,EACe,2EAAA,CAAA,uBAAA,C,EAChB,kDAAA,CAAA,eAAA,C,EACG,gDAAA,CAAA,kBAAA,C,EACH,qDAAA,CAAA,eAAA,C,EACA,+CAAA,CAAA,WAAA,C,EAtMa,CAAA,EAAnB,mBAAmB,CAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BN,aAAS,iBAAT,CAA2B,IAA3B,EAA2C;AAChD,aAAO,IAAI,wDAAA,CAAA,qBAAA,CAAJ,CAAwB,IAAxB,CAAP;AACD;;AAsBD,QAAa,gBAAgB,GAA7B,MAAa,gBAAb,CAA6B,EAA7B;AAAa,IAAA,gBAAgB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CApB5B,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACR,MAAA,OAAO,EAAE,CACP,4CAAA,CAAA,cAAA,CADO,EAEP;AACA,MAAA,2DAAA,CAAA,gBAAA,CAHO,EAIP,4CAAA,CAAA,aAAA,CAJO,EAKP,4CAAA,CAAA,qBAAA,CALO,EAMP,uDAAA,CAAA,yBAAA,CANO,EAOP,gDAAA,CAAA,iBAAA,CAAA,CAAgB,OAAhB,CACE;AACE,QAAA,MAAM,EAAE;AACN,UAAA,OAAO,EAAE,gDAAA,CAAA,iBAAA,CADH;AAEN,UAAA,UAAU,EAAE,iBAFN;AAGN,UAAA,IAAI,EAAE,CAAC,iDAAA,CAAA,YAAA,CAAD;AAHA;AADV,OADF,CAPO,EAeP,uCAAA,CAAA,cAAA,CAAA,CAAa,OAAb,CAAqB,yDAAA,CAAA,aAAA,CAAA,CAAY,OAAjC,CAfO,CADD;AAkBR,MAAA,YAAY,EAAE,CAAC,kDAAA,CAAA,qBAAA,CAAD;AAlBN,KAAT,CAoB4B,CAAA,EAAhB,gBAAgB,CAAhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCb;;;;;AAGO,UAAM,cAAN,CAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACH3B;;;;;AAGO,UAAM,WAAN,CAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHxB;;;;;AAGO,UAAM,UAAN,CAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHvB;;;;;AAGO,UAAM,OAAN,CAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKpB;;;;;AAMA,QAAa,mBAAmB,GAAhC,MAAa,mBAAb,CAAgC;AAE5B;;;;AAIA,MAAA,WAAA,CAAoB,sBAApB,EAAiE;AAA7C,aAAA,sBAAA,GAAA,sBAAA;AAAiD;AAErE;;;;;;;AAKA,MAAA,OAAO,CAAC,KAAD,EAAgC,KAAhC,EAA0D;AAC7D,eAAO,KAAK,sBAAL,CAA4B,OAA5B,EAAP;AACH;;AAf2B,KAAhC;;;YAMgD,qDAAA,CAAA,uBAAA;;;AANnC,IAAA,mBAAmB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAH/B,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,CAAW;AACR,MAAA,UAAU,EAAE;AADJ,KAAX,CAG+B,E,uEAMgB,qDAAA,CAAA,uBAAA,C,EANhB,CAAA,EAAnB,mBAAmB,CAAnB","sourcesContent":["export default \"<ng-template *ngIf=\\\"cannotViewPage then notShowAddUser ; else showAddUser\\\">\\r\\n</ng-template>\\r\\n<ng-template #notShowAddUser>\\r\\n  <h2>{{'Add_User.No Valid Permission' | translate}}</h2>\\r\\n  <button mat-raised-button (click)=\\\"homePageNav()\\\" type=\\\"button\\\" class=\\\"homePage\\\" color=\\\"primary\\\">\\r\\n    {{'HOME.Ok' | translate}}\\r\\n  </button>\\r\\n</ng-template>\\r\\n<ng-template #showAddUser>\\r\\n  <mat-toolbar class = \\\"applicationTitleToolbar\\\" color=\\\"primary\\\">\\r\\n    <span><img src=\\\"./assets/STAR_logo.png\\\" style=\\\"width:50px;height:50px;padding-top: 10px;\\\"></span>\\r\\n    <div class=\\\"far-end\\\">\\r\\n      <span class=\\\"space-reducer\\\"> {{'HOME.Application name' | translate}}</span>\\r\\n      <span class=\\\"space-reducer\\\"> {{starHubUserTocName}}</span>\\r\\n    </div>\\r\\n    <span class=\\\"filler\\\"></span>\\r\\n    <button mat-button (click)=\\\"homePageNav()\\\" class=\\\"homePage\\\" [disabled]=\\\"saveButtonClicked\\\"  *ngIf=\\\"showToolbarButtons\\\" class=\\\"application-titlebar-text-style\\\">\\r\\n      <mat-icon >home</mat-icon>\\r\\n      <span class=\\\"application-titlebar-text-style\\\">{{'HOME.Home' | translate}}</span>\\r\\n    </button>\\r\\n    <button mat-button type=\\\"button\\\"  *ngIf=\\\"showToolbarButtons\\\" [disabled]=\\\"saveButtonClicked\\\" (click)=\\\"logout()\\\" class=\\\"application-titlebar-text-style\\\">\\r\\n      <mat-icon >logout</mat-icon>\\r\\n      <span class=\\\"application-titlebar-text-style\\\">{{'HOME.Logout' | translate}}</span>\\r\\n    </button>\\r\\n    <button mat-button type=\\\"button\\\"  *ngIf=\\\"showToolbarButtons\\\" [disabled]=\\\"saveButtonClicked\\\"  class=\\\"application-titlebar-text-style\\\">\\r\\n      <mat-icon>help</mat-icon>\\r\\n      <span class=\\\"application-titlebar-text-style\\\">{{'HOME.Help' | translate}}</span>\\r\\n    </button>\\r\\n    <button mat-icon-button type=\\\"button\\\" *ngIf=\\\"!showToolbarButtons\\\" [matMenuTriggerFor]=\\\"menu\\\" class=\\\"application-titlebar-text-style1\\\">\\r\\n      <mat-icon>more_vert</mat-icon>\\r\\n  </button>\\r\\n  </mat-toolbar>\\r\\n  <mat-menu  #menu=\\\"matMenu\\\">\\r\\n    <button mat-menu-item (click)=\\\"homePageNav()\\\">\\r\\n      <span>{{'HOME.Home' | translate}}</span>\\r\\n    </button>\\r\\n    <button mat-menu-item (click)=\\\"logout()\\\">\\r\\n      <span>{{'HOME.Logout' | translate}}</span>\\r\\n    </button>\\r\\n    <button mat-menu-item>\\r\\n      <span>{{'HOME.Help' | translate}}</span>\\r\\n    </button>\\r\\n  </mat-menu>\\r\\n  <!-- Header message for screen -->\\r\\n  <fieldset class=\\\"headerFieldset\\\">\\r\\n    <h2 style=\\\"text-align:center\\\" [title]=\\\"title\\\">{{ title }}</h2>\\r\\n  </fieldset>\\r\\n     <mat-card class=\\\"formFieldset-matcard\\\">\\r\\n    <mat-card-content>\\r\\n      <div>\\r\\n        <form [formGroup]=\\\"newUserForm\\\">\\r\\n          <fieldset [disabled]=\\\"saveButtonClicked\\\" class=\\\"formFieldset\\\">\\r\\n             <!-- Show spinner while fetching data from service -->\\r\\n              <div *ngIf=\\\"saveButtonClicked\\\" class=\\\"lds-ellipsis\\\">\\r\\n                <div></div>\\r\\n                <div></div>\\r\\n                <div></div>\\r\\n                <div></div>\\r\\n              </div>\\r\\n            <table>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <p [ngClass]=\\\"{ 'has-error': isSubmitted && formControls.employeeId.errors }\\\">\\r\\n                    <!-- Empluyee ID field -->\\r\\n                    <mat-form-field>\\r\\n                      <mat-label>{{'Add_User.EmpId' | translate}}</mat-label>\\r\\n                      <input tabindex=\\\"1\\\" formControlName=\\\"employeeId\\\" matInput required minlength=\\\"1\\\" onkeypress=\\\"return /[a-zA-Z0-9]/i.test(event.key)\\\" maxlength=\\\"12\\\" name=\\\"employeeId\\\"\\r\\n                        required>\\r\\n                      <mat-error *ngIf=\\\"newUserForm.invalid\\\">{{'Add_User.EmployeeId Validation' | translate}}\\r\\n                      </mat-error>\\r\\n                    </mat-form-field>\\r\\n                  </p>\\r\\n                </td>\\r\\n                <td class=\\\"tablePaddingAlign\\\" rowspan=\\\"4\\\">\\r\\n                  <!-- Roles field -->\\r\\n                  <fieldset class=\\\"roleFieldset\\\" style=\\\"width:160px\\\">\\r\\n                    <legend>{{'Add_User.RoleOutLine' | translate}}</legend>\\r\\n                    <!-- Handle if roles are available or show message for no roles -->\\r\\n                    <div class=\\\"rolesFieldset\\\">\\r\\n                      <ng-template *ngIf=\\\"showHideRoles;then showBlock; else notShowBlock\\\">\\r\\n                      </ng-template>\\r\\n                      <ng-template #showBlock>\\r\\n                        <ng-container *ngFor=\\\"let role of roles\\\"> \\r\\n                          <mat-checkbox class=\\\"checkBoxDisplay\\\" [disabled]=\\\"disableEnableRoles || saveButtonClicked\\\" tabindex=\\\"8\\\"\\r\\n                            [checked]=\\\"role.isChecked\\\" align='left' formArrayName=\\\"roles\\\"\\r\\n                            (change)=\\\"changeSelectedRole($event)\\\" [value]=\\\"role.id\\\" required>\\r\\n                            {{role.description}}\\r\\n                          </mat-checkbox>\\r\\n                        </ng-container>\\r\\n                      </ng-template>\\r\\n                      <ng-template #notShowBlock>\\r\\n                        {{'Add_User.NO_ROLES_EXISTS' | translate}}\\r\\n                      </ng-template>\\r\\n                    </div>\\r\\n                  </fieldset>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <p [ngClass]=\\\"{ 'has-error': isSubmitted && formControls.firstName.errors }\\\">\\r\\n                    <!-- First Name field -->\\r\\n                    <mat-form-field class=\\\"full-width\\\">\\r\\n                      <mat-label>{{'Add_User.FirstName' | translate}}</mat-label>\\r\\n                      <input tabindex=\\\"2\\\" formControlName=\\\"firstName\\\" onkeypress=\\\"return /[a-z]/i.test(event.key)\\\" (input)=\\\"userDataModified()\\\" maxlength=\\\"16\\\"\\r\\n                        matInput required name=\\\"firstName\\\" required>\\r\\n                      <mat-error *ngIf=\\\"newUserForm.invalid\\\">{{'Add_User.FirstName Validation' | translate}}</mat-error>\\r\\n                    </mat-form-field>\\r\\n                  </p>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <p [ngClass]=\\\"{ 'has-error': isSubmitted && formControls.lastName.errors }\\\">\\r\\n                    <!-- Last name field -->\\r\\n                    <mat-form-field class=\\\"full-width\\\">\\r\\n                      <mat-label>{{'Add_User.LastName' | translate}}</mat-label>\\r\\n                      <input tabindex=\\\"3\\\" formControlName=\\\"lastName\\\" onkeypress=\\\"return /[a-z]/i.test(event.key)\\\" (input)=\\\"userDataModified()\\\" maxlength=\\\"35\\\"\\r\\n                        matInput name=\\\"lastName\\\" required>\\r\\n                      <mat-error *ngIf=\\\"newUserForm.invalid\\\">{{'Add_User.LastName Validation' | translate}}</mat-error>\\r\\n                    </mat-form-field>\\r\\n                  </p>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <p [ngClass]=\\\"{ 'has-error': isSubmitted && formControls.emailAddress.errors }\\\">\\r\\n                    <!-- Email Address field -->\\r\\n                    <mat-form-field class=\\\"full-width\\\">\\r\\n                      <mat-label>{{'Add_User.EmailID' | translate}}</mat-label>\\r\\n                      <input tabindex=\\\"4\\\" matInput=\\\"email\\\" (input)=\\\"userDataModified()\\\" formControlName=\\\"emailAddress\\\">\\r\\n                      <mat-error *ngIf=\\\"newUserForm.invalid\\\">{{'Add_User.Email Validation' | translate}}</mat-error>\\r\\n                    </mat-form-field>\\r\\n                  </p>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <ng-container *ngIf=\\\"hasDeletePermissions\\\">\\r\\n                <tr>\\r\\n                  <td>\\r\\n                    <ng-container *ngIf=\\\"edit\\\">\\r\\n                      <!-- New user field -->\\r\\n                      <mat-checkbox tabindex=\\\"5\\\" name=\\\"markUserActiveInactive\\\" [checked]=\\\"setUserActiveInactive\\\"\\r\\n                        (change)=\\\"changeUserStatus($event)\\\">\\r\\n                        {{activeInactiveCaption}}</mat-checkbox>\\r\\n                    </ng-container>\\r\\n                  </td>\\r\\n                  <td class=\\\"termination-date\\\">\\r\\n                    <ng-container class=\\\"termination-date\\\" *ngIf=\\\"showHideTerminationDate\\\">\\r\\n                      <mat-label class=\\\"termination-date\\\">{{'Edit_User.TerminationDate' | translate}}\\r\\n                        {{populateUserDetail.terminationDate |  date:'dd MMMM yyyy'}}</mat-label>\\r\\n                    </ng-container>\\r\\n                  </td>\\r\\n                </tr>\\r\\n              </ng-container>\\r\\n              <tr>\\r\\n                <td class=\\\"tableForcePasswordChangePadding\\\">\\r\\n                  <ng-container *ngIf=\\\"edit\\\">\\r\\n                    <!-- New user field -->\\r\\n                    <mat-checkbox tabindex=\\\"6\\\" name=\\\"forcePasswordChange\\\" [disabled]=\\\"disableEnableForcedPwdChange\\\"\\r\\n                      [checked]=\\\"isForcedPwdChangeRequired\\\" (change)=\\\"changeForcePasswordChange($event)\\\">\\r\\n                      {{'Edit_User.ForcePasswordChange' | translate}}</mat-checkbox>\\r\\n                  </ng-container>\\r\\n                </td>\\r\\n                <td></td>\\r\\n              </tr>\\r\\n            </table>\\r\\n\\r\\n            <!-- Save and Reset button enable/disable based on different criteria Add/Edit/Form No Dirty etc.. -->\\r\\n            <ng-template *ngIf=\\\"edit; then saveDisableForEdit; else saveForNewUser\\\">\\r\\n            </ng-template>\\r\\n            <ng-template #saveDisableForEdit>\\r\\n              <p>\\r\\n                <button tabindex=\\\"9\\\"  mat-button class = \\\"button-style\\\" mat-raised-button\\r\\n                  [disabled]=\\\"!newUserForm.valid || !formEdited || saveButtonClicked\\\" (click)=\\\"save()\\\" type=\\\"button\\\"\\r\\n                  color=\\\"primary\\\">{{'Add_User.Save' | translate}}</button>\\r\\n                <button tabindex=\\\"10\\\"  mat-button class = \\\"button-style\\\" mat-raised-button\\r\\n                  [disabled]=\\\"!formEdited || saveButtonClicked\\\" (click)=\\\"reset()\\\" type=\\\"button\\\"\\r\\n                  color=\\\"primary\\\"> {{'Add_User.Reset' | translate}}\\r\\n                </button>\\r\\n              </p>\\r\\n            </ng-template>\\r\\n            <ng-template #saveForNewUser>\\r\\n              <p>\\r\\n                <button tabindex=\\\"9\\\"  mat-button class = \\\"button-style\\\" mat-raised-button [disabled]=\\\"!newUserForm.valid || saveButtonClicked\\\"\\r\\n                  (click)=\\\"save()\\\" type=\\\"button\\\" \\r\\n                  color=\\\"primary\\\">{{'Add_User.Save' | translate}}</button>\\r\\n              </p>\\r\\n            </ng-template>\\r\\n          </fieldset>\\r\\n        </form>\\r\\n      </div>\\r\\n    </mat-card-content>\\r\\n  </mat-card>\\r\\n\\r\\n</ng-template>\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {NewtisuserComponent} from './newtisuser.component';\r\nimport { UserDetailsResolverService } from 'src/app/shared/service/user-details-resolver.service';\r\nimport { TocsResolverService } from 'src/app/shared/service/tocs-resolver.service';\r\nimport { LandingPageResolverService } from 'src/app/shared/service/landing-page-resolver.service';\r\n\r\n/**\r\n * Routes defined for Addition and Updation of TIS users along with resolver services\r\n */\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: NewtisuserComponent,\r\n    resolve: {userDetail : UserDetailsResolverService, tocs: TocsResolverService, landingPage : LandingPageResolverService}\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class NewtisuserRoutingModule { }\r\n","export default \"/* @import \\\"~@angular/material/prebuilt-themes/indigo-pink.css\\\"; */\\r\\n.newUserForm{\\r\\n    min-width: 150px;\\r\\n    max-width: 450px;\\r\\n    width: 100%;\\r\\n  }\\r\\nmat-form-field {\\r\\n    /* color: #FFBF00 !important; */\\r\\n    margin-left: 10px;\\r\\n    font-size: 1.0em!important;\\r\\n}\\r\\nmat-checkbox {\\r\\n    margin-left: 10px;\\r\\n}\\r\\n.lastname{\\r\\nbackground-color: white;\\r\\n}\\r\\n.fieldset {\\r\\n    padding-left: 40px;\\r\\n    display: inline-block;\\r\\n   \\r\\n}\\r\\n.termination-date {\\r\\n    margin-left: 20px;\\r\\n}\\r\\n.toc-width {\\r\\n    width: 255px;\\r\\n    max-width: 255px;\\r\\n}\\r\\nbutton {\\r\\n    margin-left: 10px;\\r\\n}\\r\\n.formFieldset {\\r\\n    background-color: #EFEFEF; \\r\\n    min-width: 500px;\\r\\n    width: 32%;\\r\\n    border: white;\\r\\n    box-shadow:0 0 10px #666;\\r\\n   }\\r\\n.formFieldset-matcard {\\r\\n    display: -webkit-box;\\r\\n    display: flex;\\r\\n    margin-top: 1%; \\r\\n    padding-top: 0%;\\r\\n    min-width: 500px; \\r\\n    -webkit-box-pack: center; \\r\\n            justify-content: center; \\r\\n    -webkit-box-align: center; \\r\\n            align-items: center\\r\\n   }\\r\\n.filler {\\r\\n    -webkit-box-flex: 1;\\r\\n            flex: 1 1 auto;\\r\\n }\\r\\n.applicationTitleToolbar {\\r\\n    background-color: #3C3C35;\\r\\n    border:1px solid #666;\\r\\n    border-radius:10px;\\r\\n    box-shadow:0 0 10px #666;\\r\\n}\\r\\n.roleFieldset {\\r\\n    border: 0;\\r\\n}\\r\\n.headerFieldset {\\r\\n      background-color:#C5C5BF;\\r\\n      line-height: 20%;\\r\\n      border:1px solid #666;\\r\\n      border-radius:10px;\\r\\n      box-shadow:0 0 10px #666;\\r\\n  }\\r\\n.application-titlebar-text-style{\\r\\n    /* color: white;\\r\\n    border: transparent;\\r\\n    font-size: medium; */\\r\\n    width: auto;\\r\\n}\\r\\n.icon-color{\\r\\n    background-color: white;\\r\\n  }\\r\\n.menu-overflow-hidden {\\r\\n    overflow: hidden !important;\\r\\n  }\\r\\n.application-titlebar-text-style1{\\r\\n  color: white;\\r\\n  font-size: medium;\\r\\n  text-align: center;\\r\\n  background-color: transparent;\\r\\n  border: transparent;\\r\\n}\\r\\n.tablePaddingAlign{\\r\\n    padding-left: 10px;\\r\\n    vertical-align : top;\\r\\n    padding-top: 28px;\\r\\n}\\r\\n.mat-button:hover {\\r\\n    background: #455a64;\\r\\n  }\\r\\n.tableTocPadding{\\r\\n    padding-left: 10px;\\r\\n    padding-top: 0px;\\r\\n}\\r\\n.tableForcePasswordChangePadding{\\r\\n    padding-top: 5px;\\r\\n}\\r\\n.checkBoxDisplay {\\r\\n    display: block;\\r\\n    /* background-color: #C5C5BF; */\\r\\n  }\\r\\n.rolesFieldset {\\r\\n    width: 258px;\\r\\n    max-width: 260px;\\r\\n    max-height: 250px;\\r\\n    overflow-y: auto;\\r\\n    overflow-x: auto;\\r\\n    border: 1px solid black;\\r\\n\\r\\n}\\r\\n::ng-deep .mat-checkbox .mat-checkbox-frame {\\r\\n    border-color: #C5C5BF;\\r\\n  }\\r\\n/* ::ng-deep .mat-checkbox-focused .mat-checkbox-focused {\\r\\n    background-color: darkgreen !important;\\r\\n  }\\r\\n  \\r\\n  ::ng-deep .mat-checkbox-checked .mat-checkbox-background {\\r\\n    background-color: darkgreen !important;\\r\\n  } */\\r\\n.far-end{\\r\\n    font-size: medium;\\r\\n    padding-left: 7px;\\r\\n    padding-top: 7px;\\r\\n    display: inline-grid;\\r\\n    margin-bottom: auto;\\r\\n    color: white;\\r\\n    font-style: italic;\\r\\n    }\\r\\n.space-reducer{\\r\\n    max-height: 20px;\\r\\n}\\r\\n.button-style{\\r\\n    /* background-color: #263238;\\r\\n    color: white;\\r\\n    width: 80px; */\\r\\n    font-size: medium;\\r\\n    /* height: 30px; */\\r\\n}\\r\\n.lds-ellipsis {\\r\\n  background-color: #EFEFEF; \\r\\n  position: absolute;\\r\\n  width: 10px;\\r\\n  height: 5px;\\r\\n  top: 1.2%;\\r\\n  left: 45%;\\r\\n}\\r\\n.lds-ellipsis div {\\r\\n  position: absolute;\\r\\n  top: 2px;\\r\\n  width: 8px;\\r\\n  height: 8px;\\r\\n  border-radius: 50%;\\r\\n  background:#3C3C35;\\r\\n  -webkit-animation-timing-function: cubic-bezier(0, 1, 1, 0);\\r\\n          animation-timing-function: cubic-bezier(0, 1, 1, 0);\\r\\n}\\r\\n.lds-ellipsis div:nth-child(1) {\\r\\n  left: 8px;\\r\\n  -webkit-animation: lds-ellipsis1 0.6s infinite;\\r\\n          animation: lds-ellipsis1 0.6s infinite;\\r\\n}\\r\\n.lds-ellipsis div:nth-child(2) {\\r\\n  left: 8px;\\r\\n  -webkit-animation: lds-ellipsis2 0.6s infinite;\\r\\n          animation: lds-ellipsis2 0.6s infinite;\\r\\n}\\r\\n.lds-ellipsis div:nth-child(3) {\\r\\n  left: 32px;\\r\\n  -webkit-animation: lds-ellipsis2 0.6s infinite;\\r\\n          animation: lds-ellipsis2 0.6s infinite;\\r\\n}\\r\\n.lds-ellipsis div:nth-child(4) {\\r\\n  left: 56px;\\r\\n  -webkit-animation: lds-ellipsis3 0.6s infinite;\\r\\n          animation: lds-ellipsis3 0.6s infinite;\\r\\n}\\r\\n@-webkit-keyframes lds-ellipsis1 {\\r\\n  0% {\\r\\n    -webkit-transform: scale(0);\\r\\n            transform: scale(0);\\r\\n  }\\r\\n  100% {\\r\\n    -webkit-transform: scale(1);\\r\\n            transform: scale(1);\\r\\n  }\\r\\n}\\r\\n@keyframes lds-ellipsis1 {\\r\\n  0% {\\r\\n    -webkit-transform: scale(0);\\r\\n            transform: scale(0);\\r\\n  }\\r\\n  100% {\\r\\n    -webkit-transform: scale(1);\\r\\n            transform: scale(1);\\r\\n  }\\r\\n}\\r\\n@-webkit-keyframes lds-ellipsis3 {\\r\\n  0% {\\r\\n    -webkit-transform: scale(1);\\r\\n            transform: scale(1);\\r\\n  }\\r\\n  100% {\\r\\n    -webkit-transform: scale(0);\\r\\n            transform: scale(0);\\r\\n  }\\r\\n}\\r\\n@keyframes lds-ellipsis3 {\\r\\n  0% {\\r\\n    -webkit-transform: scale(1);\\r\\n            transform: scale(1);\\r\\n  }\\r\\n  100% {\\r\\n    -webkit-transform: scale(0);\\r\\n            transform: scale(0);\\r\\n  }\\r\\n}\\r\\n@-webkit-keyframes lds-ellipsis2 {\\r\\n  0% {\\r\\n    -webkit-transform: translate(0, 0);\\r\\n            transform: translate(0, 0);\\r\\n  }\\r\\n  100% {\\r\\n    -webkit-transform: translate(24px, 0);\\r\\n            transform: translate(24px, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes lds-ellipsis2 {\\r\\n  0% {\\r\\n    -webkit-transform: translate(0, 0);\\r\\n            transform: translate(0, 0);\\r\\n  }\\r\\n  100% {\\r\\n    -webkit-transform: translate(24px, 0);\\r\\n            transform: translate(24px, 0);\\r\\n  }\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, OnInit } from '@angular/core';\r\nimport { NGXLogger } from 'ngx-logger';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Router } from '@angular/router';\r\nimport { Constants } from 'src/app/shared/utils/constants';\r\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators } from '@angular/forms';\r\nimport { NewUser } from 'src/app/shared/model/tisuser';\r\nimport { Language } from 'src/app/shared/model/Language';\r\nimport { Toc } from 'src/app/shared/model/Toc';\r\nimport { UserType } from 'src/app/shared/model/UserType';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ToastrManager } from 'ng6-toastr-notifications';\r\nimport { UserManagementService } from 'src/app/shared/service/user-management.service';\r\nimport { StarApp } from 'src/app/shared/model/StarApp';\r\nimport { ErrorConstants } from 'src/app/shared/utils/errorconstants';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ErrorLogging } from 'src/app/shared/model/ErrorLogging';\r\nimport { Role } from 'src/app/shared/model/Role';\r\nimport { UserDetails } from 'src/app/shared/model/UserDetails';\r\nimport { constants } from 'os';\r\nimport { PasswordChange } from 'src/app/shared/model/PasswordChange';\r\nimport { UserStatus } from 'src/app/shared/model/UserStatus';\r\nimport { AuthResponse } from 'src/app/shared/model/AuthResponse';\r\nimport { AuthAttributes } from 'src/app/shared/model/AuthAttributes';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ConfirmDialogModel, ConfirmDialogComponent } from 'src/app/shared/confirm-dialog/confirm-dialog.component';\r\nimport { LocationStrategy } from '@angular/common';\r\nimport { MediaObserver, MediaChange } from '@angular/flex-layout';\r\nimport { Auth } from 'aws-amplify';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n/**\r\n * User Maintenance related code to capture details from the form.\r\n * Make API call with given parameters and render the results.\r\n */\r\n@Component({\r\n  selector: 'app-newtisuser',\r\n  templateUrl: './newtisuser.component.html',\r\n  styleUrls: ['./newtisuser.component.css']\r\n})\r\nexport class NewtisuserComponent implements OnInit {\r\n  /** Propeties to hold class values. */\r\n  /** Form group is required to hold the input values entered in the form. */\r\n  public newUserForm: FormGroup;\r\n  /** To specify default language in which the form will appear. */\r\n  private _defaultLang: string;\r\n\r\n  /**\r\n   * Accessor for the defaultLang property.\r\n   * @return Current value of the language property.\r\n   */\r\n  public get defaultLang(): string {\r\n    return this._defaultLang;\r\n  }\r\n\r\n  /**\r\n   * Mutator for the defaultLang property.\r\n   * @param language New value of the language property.\r\n   */\r\n  public set defaultLang(value: string) {\r\n    this._defaultLang = value;\r\n  }\r\n\r\n  /** This is used to set form fields for post call to the user service. */\r\n  postApiCallTestResponse: string;\r\n  /** This is member variable used to capture response received from post api call. */\r\n  createdUserResponse: NewUser;\r\n  /** This is member variable used to capture response received from put api call. */\r\n  updatedUserResponse: UserDetails;\r\n  /**\r\n   * This is member variable used to capture error response received\r\n   * from interceptor for post/put api call.\r\n   */\r\n  errorMessagelogging: ErrorLogging;\r\n  /** Show 'No Roles available' if no roles fetched from API else show all the roles fetched from API. */\r\n  showHideRoles: boolean = false;\r\n  /** Holds selected application id and used to send while fetching roles from TOCs dropdown. */\r\n  selectedAppId: number;\r\n  /** Boolean variable to handle enable/disable of Save button until service response not received. */\r\n  saveButtonClicked: boolean = false;\r\n  /** This array is used for specifying user types. */\r\n  userTypes: UserType[] = [\r\n    { value: Constants.LIVE_USER_CODE, display: 'Live User' }\r\n  ];\r\n\r\n  /** This array is used for specifying lanuages in the drop down. */\r\n  languages: Language[] = [\r\n    { value: Constants.DEFAULT_LANGUAGE_CODE, display: 'English UK' }\r\n  ];\r\n\r\n  /** This array is used for specifying default Star mobile app. */\r\n  applicationNames: StarApp[] = [\r\n    { val: Constants.STAR_MOBILE_APP_CODE, disp: 'STARMobile app' }\r\n  ];\r\n\r\n  /** Array object to hold user details for edit returned from API. */\r\n  userDetails: UserDetails[] = [];\r\n  /** \r\n   * UserDetails object to hold user details returned from API for edit and \r\n   * use this object as a master copy of data returned from API for edit.\r\n   * Also values of this object can be used for comparing \r\n   * any changes happened in record details returned from API for edit.\r\n   */\r\n  userDetail: UserDetails;\r\n  /** \r\n   * UserDetails object to copy the values returned from API for edit \r\n   * and patch values into controls. Also as this is titely coupled with controls, \r\n   * so whatever values we cahnge in controls those automatically reflected in this object. \r\n   * Values from same object can be used to send for updating user details to API.\r\n   */\r\n  populateUserDetail: UserDetails;\r\n\r\n  /** Member variable to store Tocs returned from API and Bind with control. */\r\n  tocs: Toc[] = [];\r\n\r\n  /** Member variable to roles to store roles returned from API and Bind with control. */\r\n  roles: Role[] = [];\r\n\r\n  /**\r\n   * Member variable to bind with new password control and use its value to pass while\r\n   * calling API.\r\n   */\r\n  isForcedPwdChangeRequired: boolean = false;\r\n\r\n  /**\r\n   * Member variable to bind with markUserActiveInactive control and use its value to pass while\r\n   * calling API.\r\n   */\r\n  setUserActiveInactive: boolean = false;\r\n\r\n  /** Member variable disable/enable new password control. */\r\n  disableEnableForcedPwdChange: boolean = false;\r\n\r\n  /**\r\n   * Member variable disable/enable roles controls\r\n   * based on status of user returned from API.\r\n   */\r\n  disableEnableRoles: boolean = false;\r\n\r\n  /** Member variable to show/hide termination date label. */\r\n  showHideTerminationDate: boolean = false;\r\n\r\n  /**\r\n   * PasswordChange object to update as per check box selection and\r\n   * pass this object to api for updating into DB.\r\n   */\r\n  passwordChange: PasswordChange;\r\n\r\n  /** UserStatus object to pass this object to api for updating into DB. */\r\n  userStatus: UserStatus;\r\n\r\n  /**\r\n   * Member variable to roles to store roles returned from API for editable\r\n   * user and Bind with control.\r\n   */\r\n  userRoles: number[] = [];\r\n\r\n  /** Supported application languages. */\r\n  lang: string[] = Constants.SUPPORTED_LANGUAGES;\r\n\r\n  /** Field for diffrentiating if edit user is to be loaded or new user. */\r\n  editUser: string = Constants.EDIT;\r\n  /** Member boolian variable to check for form is in edit mode. */\r\n  edit: boolean = false;\r\n  /** Member variable to keep save button disable when first time form loads in edit mode and so on. */\r\n  formEdited: boolean = false;\r\n  /** Member variable to handle pop-up message if form is edited and user wants to leave */\r\n  windowSelectionCheck: boolean = false;\r\n\r\n  /**Set flag to hide/display edit user button after validating permissions. */\r\n  hasEditPermissions: boolean = true;\r\n\r\n  /** Set flag to hide/display edit user button after validating permissions. */\r\n  hasAddPermissions: boolean = true;\r\n\r\n  /** \r\n   * Set flag to hide/display inActive checkbox and Terminationdate label \r\n   * after validating permissions. \r\n   */\r\n  hasDeletePermissions: boolean = true;\r\n\r\n  /** Member variable to store response from resolver service. */\r\n  currentUserInfo: any;\r\n\r\n  /** Member variable for storing star hub user TOC. */\r\n  starHubUserToc: string = \"\";\r\n\r\n  /** Member variable for storing star hub user TOC Name. */\r\n  starHubUserTocName: string = \"\";\r\n\r\n  /** \r\n   * Member variable to hold caption of activeInactive \r\n   * checkbox based earlier user status. \r\n   */\r\n  activeInactiveCaption: string = \"\";\r\n\r\n  /** Flag to allow or restrict viewing the add/edit component as per valid permissions. */\r\n  cannotViewPage: boolean = false;\r\n\r\n  /** Member variable to store and check URL for add or edit. */\r\n  href: string = \"\";\r\n\r\n  /** Member variable to identify and set the page title as per Add/edit. */\r\n  title: string = \"\";\r\n\r\n  /** Capture Ok/Cancel value returned from value changed alert messgae from user. */\r\n  alertResult: boolean = false;\r\n\r\n  /** Watches for media changes to support responsive changes to content. */\r\n  flexMediaWatcher: Subscription;\r\n\r\n  /** Holds current screen width, updated as a result of media change. */\r\n  currentScreenWidth: string = '';\r\n\r\n  /** Show/hide toolbar buttons based on screen width.  */\r\n  showToolbarButtons: boolean = true;\r\n\r\n  /**\r\n   * Constructor with injected route, NGXLogger, formBuilder, router, userManagementService,\r\n   * location, media, translate, toastr, dialog.\r\n   * @param route - The route that resulted in the loading of this page.\r\n   * @param logger - Loggers to maintain application logs.\r\n   * @param formBuilder - Instance of form builder to control form related events.\r\n   * @param router - Roter object used to navigate on different pages.\r\n   * @param userManagementService - Instance of created service to call different services.\r\n   * @param media - Obser service of media to get the size of screen. \r\n   * @param translate - Service that translates messages to other languages.\r\n   * @param toastr - Toaster Service to show success and error banners.\r\n   * @param dialog - Mat Dialog instance to popup confirmation message on page. \r\n   */\r\n  constructor(private route: ActivatedRoute,\r\n    private logger: NGXLogger,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userManagementService: UserManagementService,\r\n    private media: MediaObserver,\r\n    public translate: TranslateService,\r\n    public toastr: ToastrManager,\r\n    public dialog: MatDialog) {\r\n    this.defaultLang = Constants.DEFAULT_LANGUAGE;\r\n    translate.addLangs(this.lang);\r\n    translate.setDefaultLang(this.defaultLang);\r\n    this.passwordChange = new PasswordChange();\r\n\r\n    this.flexMediaWatcher = media.media$.subscribe((change: MediaChange) => {\r\n      if (change.mqAlias !== this.currentScreenWidth) {\r\n        this.currentScreenWidth = change.mqAlias;\r\n        this.setupTable();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Define columns to be displayed as screen width changes. */\r\n  private setupTable() {\r\n    if (this.currentScreenWidth == 'xs' || this.currentScreenWidth == 'sm') {\r\n      this.showToolbarButtons = false;\r\n    } else {\r\n      this.showToolbarButtons = true;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Implement OnInit's `ngOnInit` method\r\n   * Read form controls using form builder.\r\n   */\r\n  ngOnInit() {\r\n    //Reading data for current user info from resolver to find star hub user info.\r\n    // this.currentUserInfo = this.route.snapshot.data[Constants.LANDING_PAGE_RESOLVER_FIELD];\r\n    // let authResponse = new AuthResponse(this.currentUserInfo);\r\n    // this.hasAddPermissions = authResponse.hasAddPermissions;\r\n    // this.hasEditPermissions = authResponse.hasEditPermissions;\r\n    // this.hasDeletePermissions = authResponse.hasDeletePermissions;\r\n\r\n    this.starHubUserToc = \"AW\"; // authResponse.defaultToc;\r\n    // Read the parameters from URL. \r\n    const parameters = this.route.snapshot.paramMap;\r\n    // Call createUserForm() method to create user form.\r\n    this.createUserForm();\r\n\r\n    const selectDefaultUserType = this.userTypes.find(c => c.value == Constants.LIVE_USER_CODE);\r\n    this.newUserForm.get('userType').setValue(selectDefaultUserType.value);\r\n    const defaultAppName = this.applicationNames.find(c => c.val == Constants.STAR_MOBILE_APP_CODE);\r\n    this.newUserForm.get('Applications').setValue(defaultAppName.val);\r\n\r\n    this.href = this.router.url;\r\n    if (this.href.includes(Constants.EDIT)) {\r\n      this.title = Constants.TITLE_EDIT_USERS;\r\n      if (!this.hasEditPermissions) {\r\n        this.cannotViewPage = true;\r\n      }\r\n    } else if (this.href.includes(Constants.USER_FORM)) {\r\n      this.title = Constants.TITLE_ADD_USERS;\r\n      if (!this.hasAddPermissions) {\r\n        this.cannotViewPage = true;\r\n      }\r\n    }\r\n\r\n    // Load user deatils using Resolver service.\r\n    this.userDetails = this.route.snapshot.data['userDetail'];\r\n\r\n    if (this.userDetails && this.userDetails.length > 0) {\r\n      this.userDetail = this.userDetails[0];\r\n      this.edit = true;\r\n      this.patchValuesToFormFields();\r\n    } else {\r\n      if (this.href.includes(Constants.USER_FORM)) {\r\n        this.fetchTocRoles(this.starHubUserToc);\r\n      } else {\r\n        //Navigates to the landing page in case it is an invalid url.\r\n        this.router.navigate([Constants.USER_LIST_FORM]);\r\n      }\r\n    }\r\n\r\n    // Load tocs using Resolver service.\r\n    this.tocs = this.route.snapshot.data['tocs'];\r\n\r\n    // Sort TOCs data in ascending order.\r\n    if (this.tocs != null) {\r\n\r\n      let filterResult: any = this.tocs.filter(u =>\r\n        u.internalTocCode == this.starHubUserToc);\r\n      if (filterResult != null && filterResult.length > 0) {\r\n        let tocObject: Toc = <Toc>filterResult[0];\r\n        this.starHubUserTocName = tocObject.toc;\r\n      }\r\n      this.tocs.sort((a, b) => a.toc.localeCompare(b.toc));\r\n    }\r\n  }\r\n\r\n    /**\r\n     * Method to control auth logout. User will be redirected to \r\n     * login page. Also, all local storage/cache for sort order \r\n     * and page size would be cleared.\r\n     */\r\n  logout() {\r\n    Auth.signOut({ global: true });\r\n\r\n    if (null == Auth.currentUserInfo()) {\r\n      //Clearing the local storage when the user has signed out.\r\n      localStorage.clear();\r\n      //Redirecting the user to login page after validating that\r\n      //the current user is not logged in.\r\n      const redirectUrlParams = window.location.href;\r\n      window.location.href = environment.auth_ui_url + '?redirect=' + redirectUrlParams;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Create user form with validators.\r\n   */\r\n  createUserForm() {\r\n    this.newUserForm = this.formBuilder.group({\r\n      employeeId: ['', Validators.compose([Validators.required,\r\n      Validators.minLength(Constants.EMP_ID_MIN_LENGTH), Validators.pattern('^[a-zA-Z0-9\\']+')])],\r\n      firstName: ['', Validators.compose([Validators.required, Validators.pattern('^[a-zA-Z\\']+')])],\r\n      lastName: ['', Validators.compose([Validators.required, , Validators.pattern('^[a-zA-Z\\']+')])],\r\n      emailAddress: ['', [Validators.email]],\r\n      Applications: ['', Validators.required],\r\n      languageCode: [Constants.DEFAULT_LANGUAGE_CODE, Validators.required],\r\n      toc: [this.starHubUserToc, Validators.required],\r\n      password: [Constants.DEFAULT_PASSWORD],\r\n      userType: ['', Validators.required],\r\n      operatorId: [''],\r\n      manualPriceAuthorisation: [Constants.MANUAL_PRICE_AUTH_CODE],\r\n      storeId: [Constants.STORE_ID],\r\n      roles: this.formBuilder.array(this.roles, Validators.required),\r\n      forcePasswordChange: []\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Patch values to the fields on loading the form for edit for the user selected from user list\r\n   *  resettin these values when user selects reset of the edited form values in the edit user page.\r\n   */\r\n  patchValuesToFormFields() {\r\n    if (this.edit == true) {\r\n      if (this.userDetail != null) {\r\n        this.populateUserDetail = Object.assign({}, this.userDetail);\r\n        // Applying logic of Deep copy to keep original roles returned from API for editable user seperate\r\n        // than binding objects and later on when user click on reset button\r\n        // these same roles can be copied to control binding objects.\r\n        if (this.userRoles.length > 0) {\r\n          this.userDetail.roles = [];\r\n          this.populateUserDetail.roles = [];\r\n          for (let i = 0; i < this.userRoles.length; i++) {\r\n            this.userDetail.roles.push(this.userRoles[i]);\r\n            this.populateUserDetail.roles.push(this.userRoles[i]);\r\n          }\r\n        } else {\r\n          for (let i = 0; i < this.userDetail.roles.length; i++) {\r\n            this.userRoles.push(this.userDetail.roles[i]);\r\n          }\r\n        }\r\n        // ToDo: Later on this can also be fetched using resolver service for editing user\r\n        this.fetchTocRoles(this.populateUserDetail.toc);\r\n        // Populate force password member variable with value returned from API\r\n        if (this.userDetail.forcePwdChange) {\r\n          this.isForcedPwdChangeRequired = true;\r\n          this.disableEnableForcedPwdChange = true;\r\n          this.passwordChange.isForcedPwdChangeRequired = true;\r\n        } else {\r\n          this.isForcedPwdChangeRequired = false;\r\n          this.passwordChange.isForcedPwdChangeRequired = false;\r\n          this.disableEnableForcedPwdChange = false;\r\n        }\r\n        // Populate markUserActiveInactive control with value returned from API\r\n        if (!this.userDetail.terminationDate || this.userDetail.terminationDate == null) {\r\n          this.disableEnableRoles = false;\r\n          this.setUserActiveInactive = false;\r\n          this.showHideTerminationDate = false;\r\n          this.activeInactiveCaption = Constants.MAKE_INACTIVE;\r\n        } else {\r\n          this.showHideTerminationDate = true;\r\n          this.activeInactiveCaption = Constants.MAKE_ACTIVE;\r\n          this.setUserActiveInactive = false;\r\n          this.disableEnableRoles = true;\r\n          this.disableEnableForcedPwdChange = true;\r\n          this.newUserForm.controls['firstName'].disable();\r\n          this.newUserForm.controls['lastName'].disable();\r\n          this.newUserForm.controls['emailAddress'].disable();\r\n          this.newUserForm.controls['roles'].disable();\r\n          this.newUserForm.controls['forcePasswordChange'].disable();\r\n        }\r\n\r\n        // Populate fields using returned object from API for edit.\r\n        this.newUserForm.patchValue({\r\n          employeeId: this.populateUserDetail.employeeId,\r\n          toc: this.populateUserDetail.toc,\r\n          firstName: this.populateUserDetail.firstName,\r\n          lastName: this.populateUserDetail.lastName,\r\n          role: this.populateUserDetail.roles,\r\n          emailAddress: this.populateUserDetail.emailAddress\r\n        });\r\n\r\n        this.newUserForm.controls['employeeId'].disable();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Capture selected Application's value from drop down use the same later on while\r\n   * fetching Roles from API.\r\n   * @param event - To be used to get selected Application's value from Application drop down\r\n   */\r\n  changeSelectedApplication(event: any) {\r\n    this.selectedAppId = event.value;\r\n  }\r\n\r\n  /**\r\n   * Capture checked/unchecked value of forcePasswordChange checkbox.\r\n   * @param event - To be used to get forcePasswordChange checkbox checked value.\r\n   */\r\n  changeForcePasswordChange(event: any) {\r\n    this.formEdited = true;\r\n    this.isForcedPwdChangeRequired = event.checked;\r\n    this.passwordChange.isForcedPwdChangeRequired = event.checked;\r\n    if (event.checked) {\r\n      this.setUserActiveInactive = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Capture checked/unchecked value of forcePasswordChange checkbox\r\n   * @param event - To be used to get markUserActiveInactive checkbox checked value\r\n   */\r\n  changeUserStatus(event: any) {\r\n    if (!this.disableEnableForcedPwdChange && this.isForcedPwdChangeRequired) {\r\n      this.isForcedPwdChangeRequired = false;\r\n      this.passwordChange.isForcedPwdChangeRequired = false;\r\n    }\r\n\r\n    this.formEdited = true;\r\n    this.setUserActiveInactive = event.checked;\r\n  }\r\n\r\n  /**\r\n   * User fields modified event.\r\n   */\r\n  userDataModified() {\r\n    if (this.edit) {\r\n      this.formEdited = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to handle home page navigation click event\r\n   */\r\n  homePageNav() {\r\n    if (this.edit && this.newUserForm.valid && this.formEdited == true) {\r\n\r\n      const dialogData = new ConfirmDialogModel();\r\n      const dialogRef = this.dialog.open(ConfirmDialogComponent, { data: dialogData });\r\n\r\n      dialogRef.afterClosed().subscribe(dialogResult => {\r\n        this.alertResult = dialogResult;\r\n        if (this.alertResult) {\r\n          this.router.navigate([Constants.USER_LIST_FORM]);\r\n        }\r\n      });\r\n    } else {\r\n      this.router.navigate([Constants.USER_LIST_FORM]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch TOC roles from API\r\n   * @param tocCode The TOC code for which roles are required.\r\n   * @return The list of roles available for the the given TOC.\r\n   */\r\n  fetchTocRoles(tocCode: string) {\r\n    this.logger.info('TOC Code send to service for pulling out roles details :' + tocCode);\r\n    this.userManagementService.getUserRoles(tocCode, this.selectedAppId).subscribe\r\n      (\r\n        (data: any) => {\r\n          this.roles = [];\r\n          this.showHideRoles = false;\r\n          if (data != null) {\r\n            var roleObjects = <object[]>data;\r\n            if (roleObjects.length > 0) {\r\n              this.showHideRoles = true;\r\n              this.roles = <Role[]>roleObjects;\r\n              this.roles.sort((a, b) => a.description.localeCompare(b.description));\r\n              // Push all the roles of edit record into controls by matching Role Id.\r\n              if (this.edit) {\r\n                this.setRolesForEditUser();\r\n              }\r\n            }\r\n          }\r\n        },\r\n        (error: any) => {\r\n          this.logger.error(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Set roles for the edit user details in control.\r\n   */\r\n  setRolesForEditUser() {\r\n    if (this.roles.length > 0) {\r\n      const mobileRoles = <FormArray>this.newUserForm.get('roles') as FormArray;\r\n      let rolesObject: number[] = this.populateUserDetail.roles;\r\n      for (let j = 0; j < rolesObject.length; j++) {\r\n        for (let i = 0; i < this.roles.length; i++) {\r\n          if (this.roles[i].id == rolesObject[j]) {\r\n            this.roles[i].isChecked = true;\r\n            mobileRoles.push(new FormControl(this.roles[i].id));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change event method to capture the roles selected during user creation.\r\n   * @param event  Handle selection and di-selection of roles.\r\n   */\r\n  changeSelectedRole(event) {\r\n    this.formEdited = true;\r\n    const mobileRoles = <FormArray>this.newUserForm.get('roles') as FormArray;\r\n    if (event.checked) {\r\n      mobileRoles.push(new FormControl(event.source.value));\r\n      if (this.edit) {\r\n        this.populateUserDetail.roles.push(event.source.value);\r\n      }\r\n    } else {\r\n      const i = mobileRoles.controls.findIndex(x => x.value === event.source.value);\r\n      mobileRoles.removeAt(i);\r\n      if (this.edit) {\r\n        const index: number = this.populateUserDetail.roles.indexOf(event.source.value);\r\n        if (index !== -1) {\r\n          this.populateUserDetail.roles.splice(index, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ToDo: Review it later and check how this can be handled from spec file\r\n   * Mark a role selected in Roles checkbox based on provided fixed value of TOC\r\n   * @param roleId - provided numeric role if\r\n   */\r\n  selectMatCheckBox(roleId: number) {\r\n    const mobileRoles = <FormArray>this.newUserForm.get('roles') as FormArray;\r\n    mobileRoles.push(new FormControl(roleId));\r\n  }\r\n\r\n  /**\r\n   * Reset form data\r\n   */\r\n  reset() {\r\n    this.roles = [];\r\n    this.populateUserDetail.roles = [];\r\n    const mobileRoles = <FormArray>this.newUserForm.get('roles') as FormArray;\r\n    let selectedRoles: number[] = [];\r\n    if (mobileRoles != null && mobileRoles.length != 0) {\r\n      selectedRoles = mobileRoles.value.toString().split(',');\r\n      for (let i = 0; i < selectedRoles.length; i++) {\r\n        const j = mobileRoles.controls.findIndex(x => x.value == selectedRoles[i]);\r\n        mobileRoles.removeAt(j);\r\n        const index: number = this.populateUserDetail.roles.indexOf(selectedRoles[i]);\r\n        if (index !== -1) {\r\n          this.populateUserDetail.roles.splice(index, 1);\r\n        }\r\n      }\r\n    }\r\n    this.patchValuesToFormFields();\r\n    this.formEdited = false;\r\n  }\r\n\r\n  /**\r\n   * Save method enabled when all required fields are added correctly.\r\n   * Shows the success toastr.\r\n   * Reset the form fields conditionally in case of Add user.\r\n   * Navigate to landing page in case of success for edit user.\r\n   */\r\n  save() {\r\n    var firstName;\r\n    var lastName;\r\n    var eMail;\r\n    var empId;\r\n    Object.keys(this.newUserForm.controls).forEach((key: string) => {\r\n      const abstractControl = this.newUserForm.get(key);\r\n      if (abstractControl instanceof FormGroup) {\r\n      } else if ((key) == 'employeeId') {\r\n        empId = abstractControl.value;\r\n        this.newUserForm.get('operatorId').setValue(abstractControl.value);\r\n      } else if ((key) == 'firstName') {\r\n        firstName = abstractControl.value;\r\n      } else if ((key) == 'lastName') {\r\n        lastName = abstractControl.value;\r\n      } else if ((key) == 'emailAddress') {\r\n        eMail = abstractControl.value;\r\n      } else {\r\n        this.logger.info(\"Save button clicked\" + abstractControl.value);\r\n      }\r\n    });\r\n    // This will capture the service response based on the edit user service inputs.\r\n    if (this.edit == true) {\r\n      var updatedUser = new UserDetails;\r\n      updatedUser = this.populateUserDetail;\r\n      updatedUser.firstName = firstName;\r\n      updatedUser.lastName = lastName;\r\n      updatedUser.emailAddress = eMail;\r\n      updatedUser.storeId = Constants.STORE_ID;\r\n      // Set emailaddress to null incase of blank\r\n      if (updatedUser.emailAddress == '') {\r\n        updatedUser.emailAddress = null;\r\n      }\r\n      this.saveButtonClicked = true;\r\n      if (this.userDetail.forcePwdChange != this.passwordChange.isForcedPwdChangeRequired) {\r\n        // Call to updateForcePasswordChangeFlag method to \r\n        // update isForcedPwdChangeRequired field for user into DB through API call\r\n        this.updateForcePasswordChangeFlag(empId, updatedUser);\r\n      } else {\r\n        if (this.setUserActiveInactive) {\r\n          // Call updateUserStatus method to update status of user in DB through API\r\n          this.updateUserStatus(empId, updatedUser);\r\n        } else {\r\n          // Call updateUserDetails method to update user details in DB though API\r\n          this.updateUserDetails(updatedUser);\r\n        }\r\n      }\r\n    } else {\r\n      // Call updateUserDetails method to update user details in DB though API\r\n      this.addUserDeatils();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to update user status through API call.\r\n   * @param tocAfterReset - TOC code from which Star Hub user belongs \r\n   * @param empId - User Id of user being updated \r\n   * @param updatedUser - object carrying details for updating user\r\n   */\r\n  updateUserStatus(empId: string, updatedUser: UserDetails) {\r\n    this.logger.info('Json send to service for updating user status field for user:');\r\n    this.userStatus = new UserStatus();\r\n    if (this.setUserActiveInactive) {\r\n      if (!this.showHideTerminationDate) {\r\n        this.userStatus.activeStateChangeAction = Constants.USER_TERMINATE;\r\n      } else {\r\n        this.userStatus.activeStateChangeAction = Constants.USER_REACTIVATE;\r\n      }\r\n    }\r\n    this.userManagementService.postChangeUserStatus(this.starHubUserToc, empId, this.userStatus).subscribe\r\n      (\r\n        (data: any) => {\r\n          // after success response from save force passwordchange field api call update user info method\r\n          if (this.checkModifiedFields()) {\r\n            this.updateUserDetails(updatedUser);\r\n          } else {\r\n            this.toastr.successToastr(Constants.USER_UPDATED_SUCCESS_SECONDARY,\r\n              Constants.USER_UPDATED_SUCCESS_PRIMARY);\r\n            this.logger.info('Logging success updated user status by calling API ' +\r\n              Constants.USER_UPDATED_SUCCESS_SECONDARY, Constants.USER_UPDATED_SUCCESS_PRIMARY);\r\n            this.logger.info(data);\r\n            this.router.navigate(['userlist']);\r\n          }\r\n        },\r\n        (error: any) => {\r\n          this.saveButtonClicked = false;\r\n          this.errorMessagelogging = error;\r\n          if (this.errorMessagelogging.errorMessage.includes('$')) {\r\n            this.toastr.errorToastr(this.errorMessagelogging.errorMessage.split('$')[1],\r\n              this.errorMessagelogging.errorMessage.split('$')[0]);\r\n            this.logger.error('Logging error on post service call for userStatus -' +\r\n              this.errorMessagelogging.errorMessage.split('$')[1],\r\n              this.errorMessagelogging.errorMessage.split('$')[0]);\r\n          } else {\r\n            this.toastr.errorToastr(this.errorMessagelogging.errorMessage);\r\n            this.logger.error(this.errorMessagelogging.errorObject);\r\n          }\r\n          this.logger.error(this.userStatus);\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Method to update forcepasswordchange flag for user through API call.\r\n   * @param tocAfterReset - TOC code from which Star Hub user belongs \r\n   * @param empId - User Id of user being updated \r\n   * @param updatedUser - object carrying details for updating user\r\n   */\r\n  updateForcePasswordChangeFlag(empId: string, updatedUser: UserDetails) {\r\n    this.logger.info('Json send to service for updating forcepasswordchange field for user:');\r\n    this.userManagementService.postForcePasswordChange(this.starHubUserToc, empId, this.passwordChange).subscribe\r\n      (\r\n        (data: any) => {\r\n          // after success response from save force passwordchange field api call update user info method\r\n          if (this.checkModifiedFields()) {\r\n            this.updateUserDetails(updatedUser);\r\n          } else {\r\n            this.toastr.successToastr(Constants.USER_UPDATED_SUCCESS_SECONDARY,\r\n              Constants.USER_UPDATED_SUCCESS_PRIMARY);\r\n            this.logger.info('Logging success updated forcepasswordchange by calling API ' +\r\n              Constants.USER_UPDATED_SUCCESS_SECONDARY, Constants.USER_UPDATED_SUCCESS_PRIMARY);\r\n            this.logger.info(data);\r\n            this.router.navigate(['userlist']);\r\n          }\r\n        },\r\n        (error: any) => {\r\n          this.saveButtonClicked = false;\r\n          this.errorMessagelogging = error;\r\n          if (this.errorMessagelogging.errorMessage.includes('$')) {\r\n            this.toastr.errorToastr(this.errorMessagelogging.errorMessage.split('$')[1],\r\n              this.errorMessagelogging.errorMessage.split('$')[0]);\r\n            this.logger.error('Logging error on post service call for forcepasswrodreset -' +\r\n              this.errorMessagelogging.errorMessage.split('$')[1],\r\n              this.errorMessagelogging.errorMessage.split('$')[0]);\r\n          } else {\r\n            this.toastr.errorToastr(this.errorMessagelogging.errorMessage);\r\n            this.logger.error(this.errorMessagelogging.errorObject);\r\n          }\r\n          this.logger.error(this.passwordChange);\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Method to check if either of FirsrtName, LastName, Roles, E-Mail Address is modified\r\n   * @return True/False based on checked criteria of modified fields.\r\n   */\r\n  checkModifiedFields(): boolean {\r\n    let returnObject = false;\r\n    if (this.populateUserDetail.firstName != this.userDetail.firstName) {\r\n      returnObject = true;\r\n    }\r\n    if (this.populateUserDetail.lastName != this.userDetail.lastName) {\r\n      returnObject = true;\r\n    }\r\n    if (this.populateUserDetail.emailAddress != this.userDetail.emailAddress) {\r\n      returnObject = true;\r\n    }\r\n    if (JSON.stringify(this.populateUserDetail.roles) != JSON.stringify(this.userRoles)) {\r\n      returnObject = true;\r\n    }\r\n    return returnObject;\r\n  }\r\n\r\n  /**\r\n   * update method enabled when all required fields are added correctly.\r\n   * Shows the success toastr.\r\n   * Navigate to landing page in case of success for edit user.\r\n   * @param updatedUser object carrying details for updating user\r\n   */\r\n  updateUserDetails(updatedUser: UserDetails) {\r\n    this.logger.info('Json send to service for updating user details for user:');\r\n    this.userManagementService.postUpdateUserDetails(updatedUser).subscribe\r\n      (\r\n        (data: any) => {\r\n          this.saveButtonClicked = false;\r\n          if (data instanceof Object) {\r\n            this.updatedUserResponse = data;\r\n            this.toastr.successToastr(Constants.USER_UPDATED_SUCCESS_SECONDARY,\r\n              Constants.USER_UPDATED_SUCCESS_PRIMARY);\r\n            this.logger.info('Logging success update Put API call - ' +\r\n              Constants.USER_UPDATED_SUCCESS_SECONDARY, Constants.USER_UPDATED_SUCCESS_PRIMARY);\r\n            this.logger.info(data);\r\n            this.router.navigate(['userlist']);\r\n          } else {\r\n            this.postApiCallTestResponse = data;\r\n            if (this.postApiCallTestResponse != null) {\r\n              var splits = this.postApiCallTestResponse.split('$');\r\n              if (splits[0].toString().includes(Constants.HTTP_STATUS_BADREQUEST.toString()) ||\r\n                (splits[0].includes(Constants.HTTP_STATUS_UNAUTHORIZED_ACCESS.toString())) ||\r\n                (splits[0].includes(Constants.HTTP_STATUS_FORBIDDEN.toString())) ||\r\n                (splits[0].includes(Constants.HTTP_STATUS_PAGE_NOT_FOUND.toString())) ||\r\n                (splits[0].includes(Constants.HTTP_STATUS_NOT_ALLOWED.toString()))) {\r\n                this.toastr.errorToastr(splits[1], splits[0]);\r\n                this.logger.error('Logging error on update Put service call Test -' + splits[1], splits[0]);\r\n                this.logger.info(data);\r\n              } else {\r\n                this.toastr.successToastr(splits[1], splits[0]);\r\n                this.logger.info('Logging success update Put API call Test - ' + splits[1], splits[0]);\r\n                this.logger.info(data);\r\n                this.router.navigate(['userlist']);\r\n              }\r\n            }\r\n          }\r\n        },\r\n        (error: any) => {\r\n          this.saveButtonClicked = false;\r\n          this.errorMessagelogging = error;\r\n          if (this.errorMessagelogging.errorMessage.includes('$')) {\r\n            this.toastr.errorToastr(this.errorMessagelogging.errorMessage.split('$')[1],\r\n              this.errorMessagelogging.errorMessage.split('$')[0]);\r\n            this.logger.error('Logging error on update Put service call -' +\r\n              this.errorMessagelogging.errorMessage.split('$')[1],\r\n              this.errorMessagelogging.errorMessage.split('$')[0]);\r\n          } else {\r\n            this.toastr.errorToastr(this.errorMessagelogging.errorMessage);\r\n            this.logger.error(this.errorMessagelogging.errorObject);\r\n          }\r\n          this.logger.error(updatedUser);\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * add method enabled when all required fields are added correctly.\r\n   * Shows the success toastr.\r\n   * @param toc - TOC code from which Star Hub user belongs\r\n   */\r\n  addUserDeatils() {\r\n    // This will capture the service response based on the add user service inputs.\r\n    var enteredUser = new NewUser();\r\n    enteredUser = this.newUserForm.value;\r\n    if (enteredUser.emailAddress == '') {\r\n      enteredUser.emailAddress = null;\r\n    }\r\n    this.logger.info('Jason send to service for saving New TIS user:' + enteredUser);\r\n    this.saveButtonClicked = true;\r\n    this.userManagementService.postUserDetails(enteredUser).subscribe\r\n      (\r\n        (data: any) => {\r\n          this.saveButtonClicked = false;\r\n          if (data instanceof Object) {\r\n            this.roles = [];\r\n            this.fetchTocRoles(this.starHubUserToc);\r\n            this.createdUserResponse = data;\r\n            this.toastr.successToastr(Constants.USER_SAVE_SUCCESS_SECONDARY,\r\n              Constants.USER_SAVE_SUCCESS_PRIMARY);\r\n            this.logger.info('Logging success post API call - ' +\r\n              Constants.USER_SAVE_SUCCESS_SECONDARY,\r\n              Constants.USER_SAVE_SUCCESS_PRIMARY);\r\n            this.logger.info(data);\r\n            this.newUserForm.reset();\r\n            this.ngOnInit();\r\n          } else {\r\n            this.postApiCallTestResponse = data;\r\n            if (this.postApiCallTestResponse != null) {\r\n              var splits = this.postApiCallTestResponse.split('$');\r\n              if (splits[0].toString().includes(Constants.HTTP_STATUS_BADREQUEST.toString()) ||\r\n                (splits[0].includes(Constants.HTTP_STATUS_UNAUTHORIZED_ACCESS.toString())) ||\r\n                (splits[0].includes(Constants.HTTP_STATUS_FORBIDDEN.toString())) ||\r\n                (splits[0].includes(Constants.HTTP_STATUS_NOT_ALLOWED.toString()))) {\r\n                this.toastr.errorToastr(splits[1], splits[0]);\r\n                this.logger.error('Logging error on post service call Test -' + splits[1], splits[0]);\r\n                this.logger.info(data);\r\n              } else if (splits[0].includes(Constants.HTTP_STATUS_CONFLICT.toString())) {\r\n                this.toastr.warningToastr(splits[1], splits[0]);\r\n                this.logger.error('Logging error on post service call Test -' + splits[1], splits[0]);\r\n                this.logger.info(data);\r\n              } else {\r\n                this.roles = [];\r\n                this.fetchTocRoles(this.starHubUserToc);\r\n                this.toastr.successToastr(splits[1], splits[0]);\r\n                this.logger.info('Logging success post API call Test - ' + splits[1], splits[0]);\r\n                this.logger.info(data);\r\n                this.newUserForm.reset();\r\n                this.ngOnInit();\r\n              }\r\n            }\r\n          }\r\n        },\r\n        (error: any) => {\r\n          this.saveButtonClicked = false;\r\n          this.errorMessagelogging = error;\r\n          if (this.errorMessagelogging.errorMessage.includes('$')) {\r\n            if (this.errorMessagelogging.errorMessage.split('$')[0].includes(\r\n              Constants.HTTP_STATUS_CONFLICT.toString())) {\r\n              this.toastr.warningToastr(this.errorMessagelogging.errorMessage.split('$')[1],\r\n                this.errorMessagelogging.errorMessage.split('$')[0]);\r\n              this.logger.error('Logging error on post service call -' +\r\n                this.errorMessagelogging.errorMessage.split('$')[1],\r\n                this.errorMessagelogging.errorMessage.split('$')[0]);\r\n            } else {\r\n              this.toastr.errorToastr(this.errorMessagelogging.errorMessage.split('$')[1],\r\n                this.errorMessagelogging.errorMessage.split('$')[0]);\r\n              this.logger.error('Logging error on post service call -' +\r\n                this.errorMessagelogging.errorMessage.split('$')[1],\r\n                this.errorMessagelogging.errorMessage.split('$')[0]);\r\n            }\r\n          } else {\r\n            this.toastr.errorToastr(this.errorMessagelogging.errorMessage);\r\n            this.logger.error(this.errorMessagelogging.errorObject);\r\n          }\r\n          this.logger.error(enteredUser);\r\n        }\r\n      );\r\n    this.newUserForm.markAsPristine();\r\n    this.newUserForm.markAsUntouched();\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NewtisuserRoutingModule } from './newtisuser-routing.module';\r\nimport { NewtisuserComponent } from './newtisuser.component';\r\nimport { LoggerModule } from 'ngx-logger';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MaterialModule } from 'src/app/shared/material.module';\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n  return new TranslateHttpLoader(http);\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    // AppRoutingModule,\r\n    MaterialModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NewtisuserRoutingModule,\r\n    TranslateModule.forRoot(\r\n      {\r\n        loader: {\r\n          provide: TranslateLoader,\r\n          useFactory: HttpLoaderFactory,\r\n          deps: [HttpClient]\r\n        }\r\n      }),\r\n    LoggerModule.forRoot(environment.logging)\r\n  ],\r\n  declarations: [NewtisuserComponent]\r\n})\r\nexport class NewtisuserModule { }\r\n\r\n","/**\r\n *  Represents the model structure to handle force password change in UI.\r\n */\r\nexport class PasswordChange {\r\n    isForcedPwdChangeRequired: boolean;\r\n  }","/**\r\n *  Represents the model structure for Edit User returned from API.\r\n */\r\nexport class UserDetails {\r\n    employeeId: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    toc: string;\r\n    terminationDate: Date;\r\n    status: string;\r\n    emailAddress: string;\r\n    roles: number[];\r\n    customerId: string;\r\n    manualPriceAuthorisation: number;\r\n    operatorId: string;\r\n    languageCode: number;\r\n    defaultTillId: string;\r\n    displayName: string;\r\n    userType: number;\r\n    birthDate: Date;\r\n    handCode: number;\r\n    shiftNlc: string;\r\n    shiftTpv: string;\r\n    storeId: number;\r\n    password: string;\r\n    forcePwdChange: boolean;\r\n}","/**\r\n *  Represents the model structure to handle user status change in UI.\r\n */\r\nexport class UserStatus {\r\n    activeStateChangeAction: string;\r\n}","/**\r\n *  Represents the model structure for NewUser returned from API.\r\n */\r\nexport class NewUser {\r\n    employeeId: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    emailAddress: string;\r\n    languageCode: string;\r\n    toc: string;\r\n    password: number;\r\n    userType: string;\r\n    operatorId: string;\r\n    storeId: string;\r\n    roles: number[];\r\n    manualPriceAuthorisation: string;\r\n}","import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { UserDetails } from '../model/UserDetails';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { UserManagementService } from './user-management.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Role } from '../model/Role';\r\nimport { Toc } from '../model/Toc';\r\n\r\n/**\r\n * Resolver service to load TOCs data edit page before navigating to edit page from landing page\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TocsResolverService implements Resolve<Toc[]>\r\n{\r\n    /**\r\n     * Constructor for fetch tocs resolver service.\r\n     * @param _userManagementService  Instance of UserManagementService to call service methods.\r\n     */\r\n    constructor(private _userManagementService: UserManagementService) {}\r\n\r\n    /**\r\n     * resolve method implementation to fetch tocs.\r\n     * @param route Instance of ActivatedRouteSnapshot to handle params supplied in routing.\r\n     * @param state Instance of RouterStateSnapshot to indicate current application state.\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Toc[]> {\r\n        return this._userManagementService.getTocs();\r\n    }\r\n}"],"sourceRoot":"webpack:///","file":"managetisuser-newtisuser-newtisuser-module-es5.387cb34636e03b8c2ce0.js"}