/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpBackend, HttpRequest, HttpResponse } from '@angular/common/http';
import * as vlq from 'vlq';
import { of } from 'rxjs';
import { catchError, filter, map, retry, shareReplay, switchMap } from 'rxjs/operators';
import { LogPosition } from './types/log-position';
export class NGXMapperService {
    /**
     * @param {?} httpBackend
     */
    constructor(httpBackend) {
        this.httpBackend = httpBackend;
        // used to cache source maps
        this.logPositionRequests = new Map();
    }
    /*
      Static Functions
     */
    /**
     * @private
     * @return {?}
     */
    static getStackLine() {
        /** @type {?} */
        const error = new Error();
        try {
            // noinspection ExceptionCaughtLocallyJS
            throw error;
        }
        catch (e) {
            try {
                return error.stack.split('\n')[5];
            }
            catch (e) {
                return null;
            }
        }
    }
    /**
     * @private
     * @param {?} stackLine
     * @return {?}
     */
    static getPosition(stackLine) {
        // strip base path, then parse filename, line, and column
        /** @type {?} */
        const positionStartIndex = stackLine.lastIndexOf('\/');
        /** @type {?} */
        let positionEndIndex = stackLine.indexOf(')');
        if (positionEndIndex < 0) {
            positionEndIndex = undefined;
        }
        /** @type {?} */
        const position = stackLine.substring(positionStartIndex + 1, positionEndIndex);
        /** @type {?} */
        const dataArray = position.split(':');
        if (dataArray.length === 3) {
            return new LogPosition(dataArray[0], +dataArray[1], +dataArray[2]);
        }
        return new LogPosition('unknown', 0, 0);
    }
    /**
     * @private
     * @param {?} stackLine
     * @return {?}
     */
    static getTranspileLocation(stackLine) {
        /** @type {?} */
        let locationStartIndex = stackLine.indexOf('(');
        if (locationStartIndex < 0) {
            locationStartIndex = stackLine.lastIndexOf(' ');
        }
        /** @type {?} */
        let locationEndIndex = stackLine.indexOf(')');
        if (locationEndIndex < 0) {
            locationEndIndex = undefined;
        }
        return stackLine.substring(locationStartIndex + 1, locationEndIndex);
    }
    /**
     * @private
     * @param {?} stackLine
     * @return {?}
     */
    static getMapFilePath(stackLine) {
        /** @type {?} */
        const file = NGXMapperService.getTranspileLocation(stackLine);
        /** @type {?} */
        const mapFullPath = file.substring(0, file.lastIndexOf(':'));
        return mapFullPath.substring(0, mapFullPath.lastIndexOf(':')) + '.map';
    }
    /**
     * @private
     * @param {?} sourceMap
     * @param {?} position
     * @return {?}
     */
    static getMapping(sourceMap, position) {
        // => ';' indicates end of a line
        // => ',' separates mappings in a line
        // decoded mapping => [ generatedCodeColumn, sourceFileIndex, sourceCodeLine, sourceCodeColumn, nameIndex ]
        /** @type {?} */
        let sourceFileIndex = 0;
        /** @type {?} */
        let // second field
        sourceCodeLine = 0;
        /** @type {?} */
        let // third field
        sourceCodeColumn = 0;
        // fourth field
        /** @type {?} */
        const lines = sourceMap.mappings.split(';');
        for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {
            // reset column position to 0 after each line
            /** @type {?} */
            let generatedCodeColumn = 0;
            // decode sections in line
            /** @type {?} */
            const columns = lines[lineIndex].split(',');
            for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {
                /** @type {?} */
                const decodedSection = vlq.decode(columns[columnIndex]);
                if (decodedSection.length >= 4) {
                    // update relative positions
                    generatedCodeColumn += decodedSection[0];
                    sourceFileIndex += decodedSection[1];
                    sourceCodeLine += decodedSection[2];
                    sourceCodeColumn += decodedSection[3];
                }
                // check if matching map
                if (lineIndex === position.lineNumber) {
                    if (generatedCodeColumn === position.columnNumber) {
                        // matching column and line found
                        return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, sourceCodeColumn);
                    }
                    else if (columnIndex + 1 === columns.length) {
                        // matching column not found, but line is correct
                        return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, 0);
                    }
                }
            }
        }
        // failed if reached
        return new LogPosition('unknown', 0, 0);
    }
    /**
     * does the http get request to get the source map
     * @private
     * @param {?} sourceMapLocation
     * @param {?} distPosition
     * @return {?}
     */
    _getSourceMap(sourceMapLocation, distPosition) {
        /** @type {?} */
        const req = new HttpRequest('GET', sourceMapLocation);
        if (!this.logPositionRequests.has(sourceMapLocation)) {
            /** @type {?} */
            const logPosition = this.httpBackend.handle(req).pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            e => (e instanceof HttpResponse))), map((/**
             * @param {?} httpResponse
             * @return {?}
             */
            (httpResponse) => httpResponse.body)), map((/**
             * @param {?} sourceMap
             * @return {?}
             */
            sourceMap => {
                // map generated position to source position
                return NGXMapperService.getMapping(sourceMap, distPosition);
            })), retry(3), 
            // if there is an error getting the source, map fall back to the filename and line number of
            catchError((/**
             * @return {?}
             */
            () => {
                return of(distPosition);
            })), shareReplay(1));
            this.logPositionRequests.set(sourceMapLocation, logPosition);
        }
        return this.logPositionRequests.get(sourceMapLocation);
    }
    /**
     * Returns the LogPosition for the current log
     * If sourceMaps are enabled, it attemps to get the source map from the server, and use that to parse the file name
     * and number of the call
     * @param {?} sourceMapsEnabled
     * @return {?}
     */
    getCallerDetails(sourceMapsEnabled) {
        // parse generated file mapping from stack trace
        // parse generated file mapping from stack trace
        /** @type {?} */
        const stackLine = NGXMapperService.getStackLine();
        // if we were not able to parse the stackLine, just return an empty Log Position
        if (!stackLine) {
            return of(new LogPosition('', 0, 0));
        }
        return of([
            NGXMapperService.getPosition(stackLine),
            NGXMapperService.getMapFilePath(stackLine)
        ]).pipe(switchMap((/**
         * @param {?} __0
         * @return {?}
         */
        ([distPosition, sourceMapLocation]) => {
            // if source maps are not enabled, or if we've previously tried to get the source maps, but they failed,
            // then just use the position of the JS instead of the source
            if (!sourceMapsEnabled) {
                return of(distPosition);
            }
            // finally try to get the source map and return the position
            return this._getSourceMap(sourceMapLocation, distPosition);
        })));
    }
}
NGXMapperService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NGXMapperService.ctorParameters = () => [
    { type: HttpBackend }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NGXMapperService.prototype.logPositionRequests;
    /**
     * @type {?}
     * @private
     */
    NGXMapperService.prototype.httpBackend;
}
//# sourceMappingURL=data:application/json;base64,